C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          #include "LCD12864.h"
   3          
   4          #include <string.h>
   5          
   6          #define INTERVAL 10 // ¼ä¸ô10ºÁÃë
   7          
   8          #define INIT_HOUR 23   // ³õÊ¼»¯Ğ¡Ê±
   9          #define INIT_MINUTE 59 // ³õÊ¼»¯·ÖÖÓ
  10          #define INIT_SECOND 58 // ³õÊ¼»¯Ãë
  11          
  12          #define INIT_YEAR 2020 // ³õÊ¼»¯Äê
  13          #define INIT_MONTH 2   // ³õÊ¼»¯ÔÂ
  14          #define INIT_DAY 28    // ³õÊ¼»¯ÈÕ
  15          
  16          #define INIT_ALARM 0         // ³õÊ¼»¯ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  17          #define INIT_ALARM_HOUR 23   // ³õÊ¼»¯ÄÖÖÓĞ¡Ê±
  18          #define INIT_ALARM_MINUTE 59 // ³õÊ¼»¯ÄÖÖÓ·ÖÖÓ
  19          #define INIT_ALARM_WEEKDAY 0 // ³õÊ¼»¯ÄÖÖÓĞÇÆÚ
  20          #define ALARMCLOCKTIMES 6    // ÄÖÖÓÏìÁå´ÎÊı
  21          
  22          #define INIT_HOURLY_CHIME 0 // ³õÊ¼»¯Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  23          #define HOURLYCHIMETIMES 3  // ÕûµãÏìÁå´ÎÊı
  24          
  25          unsigned char xdata hour = INIT_HOUR;     // ³õÊ¼»¯Ğ¡Ê±
  26          unsigned char xdata minute = INIT_MINUTE; // ³õÊ¼»¯·ÖÖÓ
  27          unsigned char xdata second = INIT_SECOND; // ³õÊ¼»¯Ãë
  28          
  29          unsigned int xdata year = INIT_YEAR;    // ³õÊ¼»¯Äê
  30          unsigned char xdata month = INIT_MONTH; // ³õÊ¼»¯ÔÂ
  31          unsigned char xdata day = INIT_DAY;     // ³õÊ¼»¯ÈÕ
  32          
  33          unsigned char weekday = 0; // ĞÇÆÚ£¬ĞÇÆÚ³õÊ¼»¯ÈÎÎñÓÉinit()º¯Êı¸ºÔğ
  34          
  35          unsigned char alarmHour = INIT_ALARM_HOUR;       // ÄÖÖÓÊ±
  36          unsigned char alarmMinute = INIT_ALARM_MINUTE;   // ÄÖÖÓ·Ö
  37          unsigned char alarmWeekday = INIT_ALARM_WEEKDAY; // ÄÖÖÓĞÇÆÚ¹¦ÄÜ£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ¾ÖÜÒ»Ïì£¬
             -ÒÔ´ËÀàÍÆ
  38          
  39          bit alarm = INIT_ALARM; // ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  40          
  41          bit hourlyChime = INIT_HOURLY_CHIME; // Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  42          
  43          bit buttonDown = 0;            // ÓÃÓÚÅĞ¶ÏÊÇ·ñÓĞ°´¼ü°´ÏÂ£¬1ÎªÓĞ£¬0ÎªÎŞ
  44          bit button = 0;                // ÓÃÓÚÅĞ¶Ï°´ÏÂµÄÊÇÄÄ¸ö°´¼ü
  45          unsigned int checkCount = 0;   // ÓÃÓÚ¼ì²é°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´£¬Ã¿°´Ò»ºÁÃë¸Ã±äÁ¿¼ÓÒ»
  46          unsigned char shortOrLang = 0; // ÓÃÓÚ±íÊ¾°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´µÄ±êÖ¾£¬0±íÊ¾ÎŞĞ§£¬1±íÊ¾¶Ì°´£¬2±íÊ¾³¤°´
  47          
  48          unsigned char line1[17] = "                ";
  49          unsigned char line2[17] = "                ";
  50          unsigned char line3[17] = "                ";
  51          unsigned char line4[17] = "                ";
  52          
  53          unsigned char hourlyChimeTimes = 0; // ¼ÇÂ¼Õûµã±¨Ê±µÄÏìÁå´ÎÊı
  54          unsigned char alarmClockTimes = 0;  // ¼ÇÂ¼ÄÖÖÓµÄÏìÁå´ÎÊı
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 2   

  55          
  56          unsigned int stopwatchMSecond = 0; // Ãë±íµÄºÁÃëÊı
  57          unsigned char stopwatchSecond = 0; // Ãë±íµÄÃëÊı
  58          unsigned char stopwatchMinute = 0; // Ãë±íµÄ·ÖÖÓÊı
  59          unsigned int recordNum = 0;        // ¼ÇÂ¼´ÎÊı
  60          
  61          unsigned char setAlarmHour = INIT_ALARM_HOUR;       // ÉèÖÃÄÖÖÓÊ±µÄ±äÁ¿
  62          unsigned char setAlarmMinute = INIT_ALARM_MINUTE;   // ÉèÖÃÄÖÖÓ·ÖµÄ±äÁ¿
  63          unsigned char setAlarmWeekday = INIT_ALARM_WEEKDAY; // ÉèÖÃÄÖÖÓĞÇÆÚµÄ±äÁ¿£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ
             -¾ÖÜÒ»Ïì£¬ÒÔ´ËÀàÍÆ
  64          
  65          enum MODE
  66          {
  67              SHOW,                 // ÏÔÊ¾Ä£Ê½
  68              SET_YEAR,             // ÉèÖÃÄêÄ£Ê½
  69              SET_MONTH,            // ÉèÖÃÔÂÄ£Ê½
  70              SET_DAY,              // ÉèÖÃÈÕÄ£Ê½
  71              SET_HOUR,             // ÉèÖÃÊ±Ä£Ê½
  72              SET_MINUTE,           // ÉèÖÃ·ÖÄ£Ê½
  73              SET_SECOND,           // ÉèÖÃÃëÄ£Ê½
  74              STOPWATCH,            // Ãë±íÄ£Ê½
  75              STOPWATCH_START,      // Ãë±í¼ÆÊ±Ä£Ê½
  76              STOPWATCH_PAUSE,      // Ãë±íÔİÍ£Ä£Ê½
  77              ALARMCLOCK,           // ÄÖÖÓÄ£Ê½
  78              ALARMCLOCK_HOUR,      // ÉèÖÃÄÖÖÓÊ±Ä£Ê½
  79              ALARMCLOCK_MINUTE,    // ÉèÖÃÄÖÖÓ·ÖÄ£Ê½
  80              ALARMCLOCK_SUNDAY,    // ÉèÖÃÄÖÖÓÖÜÈÕÄ£Ê½
  81              ALARMCLOCK_MONDAY,    // ÉèÖÃÄÖÖÓÖÜÒ»Ä£Ê½
  82              ALARMCLOCK_TUESDAY,   // ÉèÖÃÄÖÖÓÖÜ¶şÄ£Ê½
  83              ALARMCLOCK_WEDNESDAY, // ÉèÖÃÄÖÖÓÖÜÈıÄ£Ê½
  84              ALARMCLOCK_THURSDAY,  // ÉèÖÃÄÖÖÓÖÜËÄÄ£Ê½
  85              ALARMCLOCK_FRIDAY,    // ÉèÖÃÄÖÖÓÖÜÎåÄ£Ê½
  86              ALARMCLOCK_SATURDAY   // ÉèÖÃÄÖÖÓÖÜÁùÄ£Ê½
  87          };
  88          
  89          unsigned char mode = SHOW; // Ä£Ê½
  90          
  91          unsigned int interruptCount = 0; // ÖĞ¶Ï´ÎÊı
  92          
  93          sbit Chime = P2 ^ 2; // ·äÃùÆ÷
  94          
  95          sbit P3_2 = P3 ^ 2; // Íâ²¿ÖĞ¶Ï0µÄ¿ØÖÆÒı½Å
  96          sbit P3_3 = P3 ^ 3; // Íâ²¿ÖĞ¶Ï1µÄ¿ØÖÆÒı½Å
  97          
  98          unsigned char code Seg_Date[] = {
  99              31, // 1ÔÂ
 100              28, // 2ÔÂ
 101              31, // 3ÔÂ
 102              30, // 4ÔÂ
 103              31, // 5ÔÂ
 104              30, // 6ÔÂ
 105              31, // 7ÔÂ
 106              31, // 8ÔÂ
 107              30, // 9ÔÂ
 108              31, // 10ÔÂ
 109              30, // 11ÔÂ
 110              31  // 12ÔÂ
 111          };
 112          
 113          // ³õÊ¼»¯º¯Êı
 114          void Init();
 115          // ÇĞ»»Ä£Ê½
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 3   

 116          void ChangeMode(MODE);
 117          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 118          void Check();
 119          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 120          void ShortPress();
 121          // °´¼ü³¤°´´¦Àí³ÌĞò
 122          void LongPress();
 123          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 124          void SecondIncrease();
 125          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 126          void DateIncrease();
 127          // ¸üĞÂÈÕÆÚ
 128          void UpdateWeekday();
 129          // Çå¿Õ×Ö·û´®
 130          void ClearChar(unsigned char *str);
 131          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 132          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 133          
 134          void main()
 135          {
 136   1          Init();
 137   1          while (1)
 138   1          {
 139   2              ;
 140   2          }
 141   1      }
 142          
 143          // ³õÊ¼»¯º¯Êı
 144          void Init()
 145          {
 146   1      
 147   1          UpdateWeekday(); // ³õÊ¼»¯ĞÇÆÚ
 148   1      
 149   1          LCD12864_Init(); // ³õÊ¼»¯Òº¾§ÆÁ
 150   1      
 151   1          ChangeMode(SHOW);
 152   1      
 153   1          Chime = 0; // ³õÊ¼»¯·äÃùÆ÷Òı½ÅÎª0£¬·ÀÖ¹Ëğ»µ·äÃùÆ÷
 154   1      
 155   1          EA = 1;      // ¿ªÆô×ÜÖĞ¶Ï
 156   1          IT0 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï0Îª±ßÑØ´¥·¢·½Ê½
 157   1          EX0 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï0
 158   1          IT1 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï1Îª±ßÑØ´¥·¢·½Ê½
 159   1          EX1 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï1
 160   1          PT0 = 1;     // ¼ÆÊ±Æ÷0ÖĞ¶ÏÓÅÏÈ¼¶Îª×î¸ß
 161   1          TMOD = 0x01; // ÉèÖÃ¼ÆÊ±Æ÷0¹¤×÷ÔÚ·½Ê½1
 162   1          ET0 = 1;     // ÔÊĞí¼ÆÊ±Æ÷0ÖĞ¶Ï
 163   1          TR0 = 1;     // Æô¶¯¼ÆÊ±Æ÷
 164   1      
 165   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 166   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 167   1      }
 168          
 169          void ChangeMode(MODE)
 170          {
 171   1          mode = MODE;
 172   1          switch (mode)
 173   1          {
 174   2          case SHOW:
 175   2              ClearChar(line1);
 176   2              ClearChar(line2);
 177   2              ClearChar(line3);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 4   

 178   2              ClearChar(line4);
 179   2      
 180   2              line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 181   2              line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 182   2              line1[6] = ':';
 183   2              line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 184   2              line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 185   2              line1[9] = ':';
 186   2              line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 187   2              line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 188   2      
 189   2              line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 190   2              line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 191   2              line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 192   2              line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 193   2              line2[7] = '-';
 194   2              line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 195   2              line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 196   2              line2[10] = '-';
 197   2              line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 198   2              line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 199   2      
 200   2              switch (weekday)
 201   2              {
 202   3              case 0:
 203   3                  strncpy(line3 + 6, "ÖÜÈÕ", 4);
 204   3                  break;
 205   3              case 1:
 206   3                  strncpy(line3 + 6, "ÖÜÒ»", 4);
 207   3                  break;
 208   3              case 2:
 209   3                  strncpy(line3 + 6, "ÖÜ¶ş", 4);
 210   3                  break;
 211   3              case 3:
 212   3                  strncpy(line3 + 6, "ÖÜÈı", 4);
 213   3                  break;
 214   3              case 4:
 215   3                  strncpy(line3 + 6, "ÖÜËÄ", 4);
 216   3                  break;
 217   3              case 5:
 218   3                  strncpy(line3 + 6, "ÖÜÎå", 4);
 219   3                  break;
 220   3              case 6:
 221   3                  strncpy(line3 + 6, "ÖÜÁù", 4);
 222   3                  break;
 223   3              default:
 224   3                  break;
 225   3              }
 226   2      
 227   2              strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 228   2              if (hourlyChime)
 229   2                  strncpy(line4 + 12, "¿ª", 2);
 230   2              else
 231   2                  strncpy(line4 + 12, "¹Ø", 2);
 232   2      
 233   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 234   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 235   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 236   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 237   2              break;
 238   2          case STOPWATCH:
 239   2              recordNum = 0;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 5   

 240   2              ClearChar(line1);
 241   2              ClearChar(line2);
 242   2              ClearChar(line3);
 243   2              ClearChar(line4);
 244   2      
 245   2              stopwatchMinute = 0;
 246   2              stopwatchSecond = 0;
 247   2              stopwatchMSecond = 0;
 248   2      
 249   2              line1[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 250   2              line1[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 251   2              line1[6] = ':';
 252   2              line1[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 253   2              line1[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 254   2              line1[9] = ':';
 255   2              line1[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 256   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 257   2      
 258   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 259   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 260   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 261   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 262   2          default:
 263   2              break;
 264   2          }
 265   1      }
 266          
 267          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 268          void Check()
 269          {
 270   1          checkCount++; // °´¼üÊ±¼ä¼ÆÊı£¬Ã¿¹ıÒ»ºÁÃë¼ÓÒ»¡£
 271   1      
 272   1          if (checkCount < 10 / INTERVAL) // 10msÑÓ³ÙÈ¥¶¶¶¯
 273   1              return;
 274   1      
 275   1          if (checkCount > 1010 / INTERVAL) // Èç¹û°´ÏÂÊ±¼ä´óÓÚÒ»Ãë£¬Îª³¤°´¡£
 276   1          {
 277   2              shortOrLang = 2;
 278   2              checkCount = 0;
 279   2              buttonDown = 0;
 280   2          }
 281   1          else // Èç¹û°´ÏÂÊ±¼äĞ¡ÓÚÒ»Ãë£¬ÔòÅĞ¶ÏÊÇ·ñËÉ¿ª£¬ÈôËÉ¿ª£¬ÔòÎª¶Ì°´£¬·ñÔò¼ÌĞø¼ÆÊı¡£
 282   1          {
 283   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 284   2              {
 285   3                  shortOrLang = 1;
 286   3                  checkCount = 0;
 287   3                  buttonDown = 0;
 288   3              }
 289   2          }
 290   1      }
 291          
 292          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 293          void ShortPress()
 294          {
 295   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 296   1          {
 297   2              switch (mode)
 298   2              {
 299   3              case SHOW:
 300   3                  ChangeMode(STOPWATCH);
 301   3                  break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 6   

 302   3              case STOPWATCH:
 303   3                  mode = ALARMCLOCK;
 304   3                  break;
 305   3              case STOPWATCH_START:
 306   3              case STOPWATCH_PAUSE:
 307   3                  recordNum++;
 308   3                  if (recordNum % 3 == 1)
 309   3                  {
 310   4      
 311   4                      ClearChar(line2);
 312   4                      line2[0] = (recordNum % 1000) / 100 + '0';
 313   4                      line2[1] = (recordNum % 100) / 10 + '0';
 314   4                      line2[2] = (recordNum % 10) + '0';
 315   4                      line2[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 316   4                      line2[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 317   4                      line2[6] = ':';
 318   4                      line2[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 319   4                      line2[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 320   4                      line2[9] = ':';
 321   4                      line2[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 322   4                      line2[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 323   4      
 324   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 325   4                  }
 326   3                  else if (recordNum % 3 == 2)
 327   3                  {
 328   4                      ClearChar(line3);
 329   4                      line3[0] = (recordNum % 1000) / 100 + '0';
 330   4                      line3[1] = (recordNum % 100) / 10 + '0';
 331   4                      line3[2] = (recordNum % 10) + '0';
 332   4                      line3[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 333   4                      line3[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 334   4                      line3[6] = ':';
 335   4                      line3[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 336   4                      line3[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 337   4                      line3[9] = ':';
 338   4                      line3[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 339   4                      line3[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 340   4                      LCD12864_DisplayOneLine(LINE3, line3, 16);
 341   4                  }
 342   3                  else
 343   3                  {
 344   4                      ClearChar(line4);
 345   4                      line4[0] = (recordNum % 1000) / 100 + '0';
 346   4                      line4[1] = (recordNum % 100) / 10 + '0';
 347   4                      line4[2] = (recordNum % 10) + '0';
 348   4                      line4[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 349   4                      line4[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 350   4                      line4[6] = ':';
 351   4                      line4[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 352   4                      line4[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 353   4                      line4[9] = ':';
 354   4                      line4[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 355   4                      line4[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 356   4                      LCD12864_DisplayOneLine(LINE4, line4, 16);
 357   4                  }
 358   3      
 359   3                  break;
 360   3              case ALARMCLOCK:
 361   3                  ChangeMode(SHOW);
 362   3                  break;
 363   3              case SET_HOUR:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 7   

 364   3                  mode = SET_MINUTE;
 365   3                  break;
 366   3              case SET_MINUTE:
 367   3                  mode = SET_SECOND;
 368   3                  break;
 369   3              case SET_SECOND:
 370   3                  mode = SET_HOUR;
 371   3                  break;
 372   3              case SET_YEAR:
 373   3                  mode = SET_MONTH;
 374   3                  break;
 375   3              case SET_MONTH:
 376   3                  mode = SET_DAY;
 377   3                  break;
 378   3              case SET_DAY:
 379   3                  mode = SET_YEAR;
 380   3                  break;
 381   3              case ALARMCLOCK_HOUR:
 382   3                  mode = ALARMCLOCK_MINUTE;
 383   3                  break;
 384   3              case ALARMCLOCK_MINUTE:
 385   3                  mode = ALARMCLOCK_SUNDAY;
 386   3                  break;
 387   3              case ALARMCLOCK_SUNDAY:
 388   3                  mode = ALARMCLOCK_MONDAY;
 389   3                  break;
 390   3              case ALARMCLOCK_MONDAY:
 391   3                  mode = ALARMCLOCK_TUESDAY;
 392   3                  break;
 393   3              case ALARMCLOCK_TUESDAY:
 394   3                  mode = ALARMCLOCK_WEDNESDAY;
 395   3                  break;
 396   3              case ALARMCLOCK_WEDNESDAY:
 397   3                  mode = ALARMCLOCK_THURSDAY;
 398   3                  break;
 399   3              case ALARMCLOCK_THURSDAY:
 400   3                  mode = ALARMCLOCK_FRIDAY;
 401   3                  break;
 402   3              case ALARMCLOCK_FRIDAY:
 403   3                  mode = ALARMCLOCK_SATURDAY;
 404   3                  break;
 405   3              case ALARMCLOCK_SATURDAY:
 406   3                  mode = ALARMCLOCK_HOUR;
 407   3                  break;
 408   3              default:
 409   3                  break;
 410   3              }
 411   2          }
 412   1          else
 413   1          {
 414   2              unsigned char setHour;
 415   2              unsigned char setMinute;
 416   2              unsigned char setSecond;
 417   2              switch (mode)
 418   2              {
 419   3              case SET_YEAR:
 420   3                  year++;
 421   3                  year %= 10000;
 422   3      
 423   3                  UpdateWeekday();
 424   3                  break;
 425   3              case SET_MONTH:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 8   

 426   3                  month = (month % 12) + 1;
 427   3      
 428   3                  UpdateWeekday();
 429   3                  break;
 430   3              case SET_DAY:
 431   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // ÈòÄê2ÔÂ
 432   3                      day = (day % 29) + 1;
 433   3                  else
 434   3                      day = (day % Seg_Date[month - 1]) + 1;
 435   3      
 436   3                  UpdateWeekday();
 437   3                  break;
 438   3              case SET_HOUR:
 439   3                  setHour++;
 440   3                  setHour %= 24;
 441   3      
 442   3                  break;
 443   3              case SET_MINUTE:
 444   3                  setMinute++;
 445   3                  setMinute %= 60;
 446   3      
 447   3                  break;
 448   3              case SET_SECOND:
 449   3                  setSecond++;
 450   3                  setSecond %= 60;
 451   3      
 452   3                  break;
 453   3              case STOPWATCH:
 454   3                  mode = STOPWATCH_START;
 455   3                  break;
 456   3              case STOPWATCH_START:
 457   3                  mode = STOPWATCH_PAUSE;
 458   3                  break;
 459   3              case STOPWATCH_PAUSE:
 460   3                  mode = STOPWATCH_START;
 461   3                  break;
 462   3              case ALARMCLOCK:
 463   3                  alarm = !alarm;
 464   3                  break;
 465   3              case ALARMCLOCK_HOUR:
 466   3                  setAlarmHour++;
 467   3                  setAlarmHour %= 24;
 468   3      
 469   3                  break;
 470   3              case ALARMCLOCK_MINUTE:
 471   3                  setAlarmMinute++;
 472   3                  setAlarmMinute %= 60;
 473   3      
 474   3                  break;
 475   3              case ALARMCLOCK_SUNDAY:
 476   3      
 477   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 0); // µÍ0Î»È¡·´
 478   3      
 479   3                  break;
 480   3              case ALARMCLOCK_MONDAY:
 481   3      
 482   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 1); // µÍ1Î»È¡·´
 483   3      
 484   3                  break;
 485   3              case ALARMCLOCK_TUESDAY:
 486   3      
 487   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 2); // µÍ2Î»È¡·´
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 9   

 488   3      
 489   3                  break;
 490   3              case ALARMCLOCK_WEDNESDAY:;
 491   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 3); // µÍ3Î»È¡·´
 492   3      
 493   3                  break;
 494   3              case ALARMCLOCK_THURSDAY:
 495   3      
 496   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 4); // µÍ4Î»È¡·´
 497   3      
 498   3                  break;
 499   3              case ALARMCLOCK_FRIDAY:
 500   3      
 501   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 5); // µÍ5Î»È¡·´
 502   3      
 503   3                  break;
 504   3              case ALARMCLOCK_SATURDAY:
 505   3      
 506   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 6); // µÍ6Î»È¡·´
 507   3      
 508   3                  break;
 509   3              default:
 510   3                  break;
 511   3              }
 512   2          }
 513   1      
 514   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 515   1      }
 516          
 517          // °´¼ü³¤°´´¦Àí³ÌĞò
 518          void LongPress()
 519          {
 520   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 521   1          {
 522   2              switch (mode)
 523   2              {
 524   3              case SHOW:
 525   3                  mode = SET_HOUR;
 526   3                  break;
 527   3              case SET_YEAR:
 528   3              case SET_MONTH:
 529   3              case SET_DAY:
 530   3                  if (!CheckDate(year, month, day)) // Èç¹ûÈÕÆÚÎŞÎó²ÅÄÜÈ·¶¨
 531   3                  {
 532   4                      ChangeMode(SHOW);
 533   4                  }
 534   3                  break;
 535   3              case SET_HOUR:
 536   3              case SET_MINUTE:
 537   3              case SET_SECOND:
 538   3      
 539   3                  ChangeMode(SHOW);
 540   3                  break;
 541   3              case ALARMCLOCK:
 542   3                  mode = ALARMCLOCK_HOUR;
 543   3                  break;
 544   3              case ALARMCLOCK_HOUR:
 545   3              case ALARMCLOCK_MINUTE:
 546   3              case ALARMCLOCK_SUNDAY:
 547   3              case ALARMCLOCK_MONDAY:
 548   3              case ALARMCLOCK_TUESDAY:
 549   3              case ALARMCLOCK_WEDNESDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 10  

 550   3              case ALARMCLOCK_THURSDAY:
 551   3              case ALARMCLOCK_FRIDAY:
 552   3              case ALARMCLOCK_SATURDAY:
 553   3                  alarmHour = setAlarmHour;
 554   3                  alarmMinute = setAlarmMinute;
 555   3                  alarmWeekday = setAlarmWeekday;
 556   3                  mode = ALARMCLOCK;
 557   3                  break;
 558   3              default:
 559   3                  break;
 560   3              }
 561   2          }
 562   1          else
 563   1          {
 564   2              switch (mode)
 565   2              {
 566   3              case SHOW:
 567   3                  hourlyChime = !hourlyChime;
 568   3                  strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 569   3                  if (hourlyChime)
 570   3                      strncpy(line4 + 12, "¿ª", 2);
 571   3                  else
 572   3                      strncpy(line4 + 12, "¹Ø", 2);
 573   3                  LCD12864_DisplayOneLine(LINE4, line4, 16);
 574   3                  break;
 575   3              case SET_HOUR:
 576   3              case SET_MINUTE:
 577   3              case SET_SECOND:
 578   3                  ChangeMode(SHOW);
 579   3                  break;
 580   3              case SET_YEAR:
 581   3                  year--;
 582   3                  year %= 10000;
 583   3      
 584   3                  UpdateWeekday();
 585   3                  break;
 586   3              case SET_MONTH:
 587   3                  month += 10;
 588   3                  month = (month % 12) + 1;
 589   3      
 590   3                  UpdateWeekday();
 591   3                  break;
 592   3              case SET_DAY:
 593   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 594   3                  {
 595   4                      day += 29 - 2;
 596   4                      day = (day % 29) + 1;
 597   4                  }
 598   3                  else
 599   3                  {
 600   4                      day += Seg_Date[month - 1] - 2;
 601   4                      day = (day % Seg_Date[month - 1]) + 1;
 602   4                  }
 603   3      
 604   3                  UpdateWeekday();
 605   3                  break;
 606   3              case STOPWATCH_PAUSE:
 607   3                  ChangeMode(STOPWATCH);
 608   3                  break;
 609   3              case ALARMCLOCK_HOUR:
 610   3              case ALARMCLOCK_MINUTE:
 611   3              case ALARMCLOCK_SUNDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 11  

 612   3              case ALARMCLOCK_MONDAY:
 613   3              case ALARMCLOCK_TUESDAY:
 614   3              case ALARMCLOCK_WEDNESDAY:
 615   3              case ALARMCLOCK_THURSDAY:
 616   3              case ALARMCLOCK_FRIDAY:
 617   3              case ALARMCLOCK_SATURDAY:
 618   3                  setAlarmHour = alarmHour;
 619   3                  setAlarmMinute = alarmMinute;
 620   3                  setAlarmWeekday = alarmWeekday;
 621   3                  mode = ALARMCLOCK;
 622   3                  break;
 623   3              default:
 624   3                  break;
 625   3              }
 626   2          }
 627   1      
 628   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 629   1      }
 630          
 631          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 632          void SecondIncrease()
 633          {
 634   1          second++;
 635   1          if (second > 59)
 636   1          {
 637   2              second = 0;
 638   2              minute++;
 639   2          }
 640   1      
 641   1          if (minute > 59)
 642   1          {
 643   2              minute = 0;
 644   2              hour++;
 645   2          }
 646   1      
 647   1          if (hour > 23)
 648   1          {
 649   2              hour = 0;
 650   2          }
 651   1      }
 652          
 653          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 654          void DateIncrease()
 655          {
 656   1          day++;
 657   1          if (CheckDate(year, month, day))
 658   1          {
 659   2              day = 1;
 660   2              month++;
 661   2              if (month > 12)
 662   2              {
 663   3                  month = 1;
 664   3                  year++;
 665   3              }
 666   2          }
 667   1      }
 668          
 669          // ¸üĞÂÈÕÆÚ
 670          void UpdateWeekday()
 671          {
 672   1          weekday = ((month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) -
             - 1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1) % 7;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 12  

 673   1      }
 674          
 675          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 676          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 677          {
 678   1          if (month > 12 || month < 1)
 679   1              return 1; // ÔÂ·İÓĞÎó
 680   1      
 681   1          if (day < 1)
 682   1              return 1; // ÈÕÆÚÓĞÎó
 683   1      
 684   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 685   1          {
 686   2              if (day > 29)
 687   2                  return 1; // ÈòÄê2ÔÂ29ÈÕÓĞÎó
 688   2          }
 689   1          else
 690   1          {
 691   2              if (day > Seg_Date[month - 1])
 692   2                  return 1;
 693   2          }
 694   1      
 695   1          return 0;
 696   1      }
 697          
 698          void ClearChar(unsigned char *str)
 699          {
 700   1          unsigned char len = strlen(str);
 701   1          unsigned char i = 0;
 702   1          for (i = 0; i < len; i++)
 703   1          {
 704   2              str[i] = ' ';
 705   2          }
 706   1      }
 707          
 708          void Int0() interrupt 0
 709          {
 710   1          if (buttonDown == 0)
 711   1          {
 712   2              buttonDown = 1;
 713   2              button = 0;
 714   2          }
 715   1      }
 716          
 717          void Int1() interrupt 2
 718          {
 719   1          if (buttonDown == 0)
 720   1          {
 721   2              buttonDown = 1;
 722   2              button = 1;
 723   2          }
 724   1      }
 725          
 726          // ¶¨Ê±Æ÷0ÖĞ¶Ï·şÎñº¯Êı
 727          void Timer0() interrupt 1
 728          {
 729   1          interruptCount++;
 730   1      
 731   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 732   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 733   1      
 734   1          if (interruptCount == (1000 / INTERVAL))
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 13  

 735   1          { // 1Ãë
 736   2              interruptCount = 0;
 737   2              SecondIncrease();
 738   2              if (mode == SHOW)
 739   2              {
 740   3                  ClearChar(line1);
 741   3      
 742   3                  line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 743   3                  line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 744   3                  line1[6] = ':';
 745   3                  line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 746   3                  line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 747   3                  line1[9] = ':';
 748   3                  line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 749   3                  line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 750   3      
 751   3                  LCD12864_DisplayOneLine(LINE1, line1, 16);
 752   3              }
 753   2              if (hour == 0 && minute == 0 && second == 0)
 754   2              {
 755   3                  DateIncrease();
 756   3                  UpdateWeekday();
 757   3                  if (mode == SHOW)
 758   3                  {
 759   4                      ClearChar(line2);
 760   4                      ClearChar(line3);
 761   4      
 762   4                      line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 763   4                      line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 764   4                      line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 765   4                      line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 766   4                      line2[7] = '-';
 767   4                      line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 768   4                      line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 769   4                      line2[10] = '-';
 770   4                      line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 771   4                      line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 772   4      
 773   4                      switch (weekday)
 774   4                      {
 775   5                      case 0:
 776   5                          strncpy(line3 + 6, "ÖÜÈÕ", 4);
 777   5                          break;
 778   5                      case 1:
 779   5                          strncpy(line3 + 6, "ÖÜÒ»", 4);
 780   5                          break;
 781   5                      case 2:
 782   5                          strncpy(line3 + 6, "ÖÜ¶ş", 4);
 783   5                          break;
 784   5                      case 3:
 785   5                          strncpy(line3 + 6, "ÖÜÈı", 4);
 786   5                          break;
 787   5                      case 4:
 788   5                          strncpy(line3 + 6, "ÖÜËÄ", 4);
 789   5                          break;
 790   5                      case 5:
 791   5                          strncpy(line3 + 6, "ÖÜÎå", 4);
 792   5                          break;
 793   5                      case 6:
 794   5                          strncpy(line3 + 6, "ÖÜÁù", 4);
 795   5                          break;
 796   5                      default:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 14  

 797   5                          break;
 798   5                      }
 799   4      
 800   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 801   4                      LCD12864_DisplayOneLine(LINE3, line3, 16);
 802   4                  }
 803   3              }
 804   2          }
 805   1      
 806   1          if (buttonDown == 1)
 807   1          {
 808   2              Check();
 809   2          }
 810   1      
 811   1          if (shortOrLang == 1)
 812   1          {
 813   2              ShortPress();
 814   2          }
 815   1          else if (shortOrLang == 2)
 816   1          {
 817   2              LongPress();
 818   2          }
 819   1      
 820   1          if (mode == SHOW && alarm == 1)
 821   1          {
 822   2              if (hour == alarmHour && minute == alarmMinute && second == 00 && (alarmWeekday & (1 << weekday)) 
             -> 0 && interruptCount == 0)
 823   2                  alarmClockTimes = 2 * ALARMCLOCKTIMES;
 824   2              if (alarmClockTimes != 0)
 825   2              {
 826   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 827   3                      Chime = !Chime;
 828   3                  else
 829   3                      Chime = 0;
 830   3                  if (interruptCount % (250 / INTERVAL) == 0)
 831   3                  {
 832   4                      alarmClockTimes--;
 833   4                      Chime = 0;
 834   4                  }
 835   3              }
 836   2          }
 837   1      
 838   1          if (mode == SHOW && hourlyChime == 1)
 839   1          {
 840   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 841   2                  hourlyChimeTimes = 2 * (HOURLYCHIMETIMES + 1); // ÎÒÒ²²»ÖªµÀÕâÀïÎªÊ²Ã´Òª¼ÓÒ»£¬µ«ÊÂÊµ¾ÍÊÇËü»áÏì
             -HOURLYCHIMETIMES-1´Î£¬ËùÒÔÒª¼ÓÒ»²¹ÉÏ¡£
 842   2              if (hourlyChimeTimes != 0)
 843   2              {
 844   3                  if (interruptCount > (500 / INTERVAL))
 845   3                      Chime = !Chime;
 846   3                  else
 847   3                      Chime = 0;
 848   3                  if (interruptCount % (500 / INTERVAL) == 0)
 849   3                  {
 850   4                      hourlyChimeTimes--;
 851   4                      Chime = 0;
 852   4                  }
 853   3              }
 854   2          }
 855   1      
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 15  

 856   1          switch (mode)
 857   1          {
 858   2          case SET_HOUR:
 859   2      
 860   2              break;
 861   2          case SET_MINUTE:
 862   2      
 863   2              break;
 864   2          case SET_SECOND:
 865   2      
 866   2              break;
 867   2          case SET_YEAR:
 868   2      
 869   2              break;
 870   2          case SET_MONTH:
 871   2      
 872   2              break;
 873   2          case SET_DAY:
 874   2      
 875   2              break;
 876   2          case STOPWATCH_START:
 877   2              stopwatchMSecond += INTERVAL;
 878   2              if (stopwatchMSecond > 999)
 879   2              {
 880   3                  stopwatchMSecond = 0;
 881   3                  stopwatchSecond++;
 882   3              }
 883   2              if (stopwatchSecond > 59)
 884   2              {
 885   3                  stopwatchSecond = 0;
 886   3                  stopwatchMinute++;
 887   3              }
 888   2              if (stopwatchMinute > 59)
 889   2              {
 890   3                  stopwatchMinute = 0;
 891   3              }
 892   2              line1[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 893   2              line1[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 894   2              line1[6] = ':';
 895   2              line1[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 896   2              line1[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 897   2              line1[9] = ':';
 898   2              line1[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 899   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 900   2      
 901   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 902   2      
 903   2              break;
 904   2          case STOPWATCH_PAUSE:
 905   2      
 906   2              break;
 907   2          case ALARMCLOCK:
 908   2      
 909   2              break;
 910   2          case ALARMCLOCK_HOUR:
 911   2      
 912   2              break;
 913   2          case ALARMCLOCK_MINUTE:
 914   2      
 915   2              break;
 916   2          case ALARMCLOCK_SUNDAY:
 917   2      
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 18:05:09 PAGE 16  

 918   2              break;
 919   2          case ALARMCLOCK_MONDAY:
 920   2      
 921   2              break;
 922   2          case ALARMCLOCK_TUESDAY:
 923   2      
 924   2              break;
 925   2          case ALARMCLOCK_WEDNESDAY:
 926   2      
 927   2              break;
 928   2          case ALARMCLOCK_THURSDAY:
 929   2      
 930   2              break;
 931   2          case ALARMCLOCK_FRIDAY:
 932   2      
 933   2              break;
 934   2          case ALARMCLOCK_SATURDAY:
 935   2      
 936   2              break;
 937   2          default:
 938   2              break;
 939   2          }
 940   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3767    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     89       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
