C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          #include "LCD12864.h"
   3          #include "AT24C02.h"
   4          
   5          #include <string.h>
   6          
   7          #define INTERVAL 10 // 间隔10毫秒
   8          
   9          #define INIT_HOUR 0    // 初始化小时
  10          #define INIT_MINUTE 0  // 初始化分钟
  11          #define INIT_SECOND 58 // 初始化秒
  12          
  13          #define INIT_YEAR 2023 // 初始化年
  14          #define INIT_MONTH 9   // 初始化月
  15          #define INIT_DAY 19    // 初始化日
  16          
  17          #define INIT_ALARM 1            // 初始化闹钟功能，1表示响，0表示不响
  18          #define INIT_ALARM_HOUR 0       // 初始化闹钟小时
  19          #define INIT_ALARM_MINUTE 1     // 初始化闹钟分钟
  20          #define INIT_ALARM_WEEKDAY 0x7B // 初始化闹钟星期
  21          #define ALARMCLOCKTIMES 6       // 闹钟响铃次数
  22          
  23          #define INIT_HOURLY_CHIME 0 // 初始化整点报时功能，1表示开，0表示关
  24          #define HOURLYCHIMETIMES 3  // 整点响铃次数
  25          
  26          #define HOUR_ADDR 0x00   // 小时在AT24C02中的存储地址
  27          #define MINUTE_ADDR 0x01 // 分钟在AT24C02中的存储地址
  28          #define SECOND_ADDR 0x02 // 秒在AT24C02中的存储地址
  29          
  30          #define YEAR_ADDR_H 0x03 // 年的高位在AT24C02中的存储地址
  31          #define YEAR_ADDR_L 0x04 // 年的低位在AT24C02中的存储地址
  32          #define MONTH_ADDR 0x05  // 月在AT24C02中的存储地址
  33          #define DAY_ADDR 0x06    // 日在AT24C02中的存储地址
  34          
  35          #define ALARM_HOUR_ADDR 0x07    // 闹钟时在AT24C02中的存储地址
  36          #define ALARM_MINUTE_ADDR 0x08  // 闹钟分在AT24C02中的存储地址
  37          #define ALARM_WEEKDAY_ADDR 0x09 // 闹钟星期在AT24C02中的存储地址
  38          
  39          #define ALARM_ADDR 0x0A // 闹钟功能在AT24C02中的存储地址
  40          
  41          #define HOURLY_CHIME_ADDR 0x0B // 整点报时功能在AT24C02中的存储地址
  42          
  43          unsigned char xdata hour = INIT_HOUR;     // 初始化小时
  44          unsigned char xdata minute = INIT_MINUTE; // 初始化分钟
  45          unsigned char xdata second = INIT_SECOND; // 初始化秒
  46          
  47          unsigned int xdata year = INIT_YEAR;    // 初始化年
  48          unsigned char xdata month = INIT_MONTH; // 初始化月
  49          unsigned char xdata day = INIT_DAY;     // 初始化日
  50          
  51          unsigned char xdata weekday = 0; // 星期，星期初始化任务由init()函数负责
  52          
  53          unsigned char alarmHour = INIT_ALARM_HOUR;       // 闹钟时
  54          unsigned char alarmMinute = INIT_ALARM_MINUTE;   // 闹钟分
  55          unsigned char alarmWeekday = INIT_ALARM_WEEKDAY; // 闹钟星期功能，低0位为1表示周日响，低1位为1表示周一响，
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 2   

             -以此类推
  56          
  57          bit alarm = INIT_ALARM; // 闹钟功能，1表示响，0表示不响
  58          
  59          bit hourlyChime = INIT_HOURLY_CHIME; // 整点报时功能，1表示开，0表示关
  60          
  61          bit buttonDown = 0;            // 用于判断是否有按键按下，1为有，0为无
  62          bit button = 0;                // 用于判断按下的是哪个按键
  63          unsigned int checkCount = 0;   // 用于检查按键是长按还是短按
  64          unsigned char shortOrLang = 0; // 用于表示按键是长按还是短按的标志，0表示无效，1表示短按，2表示长按
  65          
  66          unsigned char line1[17] = "                ";
  67          unsigned char line2[17] = "                ";
  68          unsigned char line3[17] = "                ";
  69          unsigned char line4[17] = "                ";
  70          
  71          unsigned char hourlyChimeTimes = 0; // 记录整点报时的响铃次数
  72          unsigned char alarmClockTimes = 0;  // 记录闹钟的响铃次数
  73          
  74          unsigned int stopwatchMSecond = 0; // 秒表的毫秒数
  75          unsigned char stopwatchSecond = 0; // 秒表的秒数
  76          unsigned char stopwatchMinute = 0; // 秒表的分钟数
  77          unsigned int recordNum = 0;        // 记录次数
  78          
  79          unsigned char xdata setAlarmHour = INIT_ALARM_HOUR;       // 设置闹钟时的变量
  80          unsigned char xdata setAlarmMinute = INIT_ALARM_MINUTE;   // 设置闹钟分的变量
  81          unsigned char xdata setAlarmWeekday = INIT_ALARM_WEEKDAY; // 设置闹钟星期的变量，低0位为1表示周日响，低1位
             -为1表示周一响，以此类推
  82          
  83          unsigned char xdata setHour = INIT_HOUR;     // 设置小时的变量
  84          unsigned char xdata setMinute = INIT_MINUTE; // 设置分钟的变量
  85          unsigned char xdata setSecond = INIT_SECOND; // 设置秒的变量
  86          
  87          enum MODE
  88          {
  89              SHOW,                     // 显示模式
  90              SET_YEAR,                 // 设置年模式
  91              SET_MONTH,                // 设置月模式
  92              SET_DAY,                  // 设置日模式
  93              SET_HOUR,                 // 设置时模式
  94              SET_MINUTE,               // 设置分模式
  95              SET_SECOND,               // 设置秒模式
  96              STOPWATCH,                // 秒表模式
  97              STOPWATCH_START,          // 秒表计时模式
  98              STOPWATCH_PAUSE,          // 秒表暂停模式
  99              ALARMCLOCK,               // 闹钟模式
 100              SET_ALARMCLOCK_HOUR,      // 设置闹钟时模式
 101              SET_ALARMCLOCK_MINUTE,    // 设置闹钟分模式
 102              SET_ALARMCLOCK_SUNDAY,    // 设置闹钟周日模式
 103              SET_ALARMCLOCK_MONDAY,    // 设置闹钟周一模式
 104              SET_ALARMCLOCK_TUESDAY,   // 设置闹钟周二模式
 105              SET_ALARMCLOCK_WEDNESDAY, // 设置闹钟周三模式
 106              SET_ALARMCLOCK_THURSDAY,  // 设置闹钟周四模式
 107              SET_ALARMCLOCK_FRIDAY,    // 设置闹钟周五模式
 108              SET_ALARMCLOCK_SATURDAY   // 设置闹钟周六模式
 109          };
 110          
 111          unsigned char mode = SHOW; // 模式
 112          
 113          unsigned int interruptCount = 0; // 中断次数
 114          
 115          sbit Chime = P2 ^ 2; // 蜂鸣器
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 3   

 116          
 117          sbit P3_2 = P3 ^ 2; // 外部中断0的控制引脚
 118          sbit P3_3 = P3 ^ 3; // 外部中断1的控制引脚
 119          
 120          unsigned char code Seg_Date[] = {
 121              31, // 1月
 122              28, // 2月
 123              31, // 3月
 124              30, // 4月
 125              31, // 5月
 126              30, // 6月
 127              31, // 7月
 128              31, // 8月
 129              30, // 9月
 130              31, // 10月
 131              30, // 11月
 132              31  // 12月
 133          };
 134          
 135          // 初始化函数
 136          void Init();
 137          // 切换模式
 138          void ChangeMode(MODE);
 139          // 检查当前按键是长按还是短按
 140          void Check();
 141          // 按键短按处理程序
 142          void ShortPress();
 143          // 按键长按处理程序
 144          void LongPress();
 145          // 秒数增加处理程序
 146          void SecondIncrease();
 147          // 日期增加处理程序
 148          void DateIncrease();
 149          // 更新日期
 150          void UpdateWeekday();
 151          // 清空字符串
 152          void ClearChar(unsigned char *str);
 153          // 检查日期程序，返回0表示日期无误，返回1表示日期有误
 154          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 155          
 156          void main()
 157          {
 158   1          Init();
 159   1          while (1)
 160   1          {
 161   2              ;
 162   2          }
 163   1      }
 164          
 165          // 初始化函数
 166          void Init()
 167          {
 168   1      
 169   1          LCD12864_Init(); // 初始化液晶屏
 170   1      
 171   1          hour = AT24C02_Read(HOUR_ADDR);
 172   1          minute = AT24C02_Read(MINUTE_ADDR);
 173   1          second = AT24C02_Read(SECOND_ADDR);
 174   1      
 175   1          year = 0;
 176   1          year += AT24C02_Read(YEAR_ADDR_L);
 177   1          year += AT24C02_Read(YEAR_ADDR_H) * 256;
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 4   

 178   1          month = AT24C02_Read(MONTH_ADDR);
 179   1          day = AT24C02_Read(DAY_ADDR);
 180   1      
 181   1          alarmHour = AT24C02_Read(ALARM_HOUR_ADDR);
 182   1          alarmMinute = AT24C02_Read(ALARM_MINUTE_ADDR);
 183   1          alarmWeekday = AT24C02_Read(ALARM_WEEKDAY_ADDR);
 184   1      
 185   1          alarm = AT24C02_Read(ALARM_ADDR) ? 1 : 0;
 186   1          hourlyChime = AT24C02_Read(HOURLY_CHIME_ADDR) ? 1 : 0;
 187   1      
 188   1          UpdateWeekday(); // 初始化星期
 189   1      
 190   1          ChangeMode(SHOW);
 191   1      
 192   1          Chime = 0; // 初始化蜂鸣器引脚为0，防止损坏蜂鸣器
 193   1      
 194   1          EA = 1;      // 开启总中断
 195   1          IT0 = 1;     // 设置外部中断0为边沿触发方式
 196   1          EX0 = 1;     // 允许外部中断0
 197   1          IT1 = 1;     // 设置外部中断1为边沿触发方式
 198   1          EX1 = 1;     // 允许外部中断1
 199   1          PT0 = 1;     // 计时器0中断优先级为最高
 200   1          TMOD = 0x01; // 设置计时器0工作在方式1
 201   1          ET0 = 1;     // 允许计时器0中断
 202   1          TR0 = 1;     // 启动计时器
 203   1      
 204   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 205   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 206   1      }
 207          
 208          void ChangeMode(MODE)
 209          {
 210   1          unsigned char i = 0;
 211   1          mode = MODE;
 212   1          switch (mode)
 213   1          {
 214   2          case SHOW:
 215   2              ClearChar(line1);
 216   2              ClearChar(line2);
 217   2              ClearChar(line4);
 218   2      
 219   2              line1[4] = hour / 10 + '0'; // 小时十位
 220   2              line1[5] = hour % 10 + '0'; // 小时个位
 221   2              line1[6] = ':';
 222   2              line1[7] = minute / 10 + '0'; // 分钟十位
 223   2              line1[8] = minute % 10 + '0'; // 分钟个位
 224   2              line1[9] = ':';
 225   2              line1[10] = second / 10 + '0'; // 秒钟十位
 226   2              line1[11] = second % 10 + '0'; // 秒钟个位
 227   2      
 228   2              line2[3] = year / 1000 + '0';     // 年份千位
 229   2              line2[4] = year / 100 % 10 + '0'; // 年份百位
 230   2              line2[5] = year / 10 % 10 + '0';  // 年份十位
 231   2              line2[6] = year % 10 + '0';       // 年份个位
 232   2              line2[7] = '-';
 233   2              line2[8] = month / 10 + '0'; // 月份十位
 234   2              line2[9] = month % 10 + '0'; // 月份个位
 235   2              line2[10] = '-';
 236   2              line2[11] = day / 10 + '0'; // 日期十位
 237   2              line2[12] = day % 10 + '0'; // 日期个位
 238   2      
 239   2              strncpy(line4 + 2, "整点报时  ", 10);
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 5   

 240   2              if (hourlyChime)
 241   2                  strncpy(line4 + 12, "开", 2);
 242   2              else
 243   2                  strncpy(line4 + 12, "关", 2);
 244   2      
 245   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 246   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 247   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 248   2      
 249   2              UpdateWeekday();
 250   2              break;
 251   2          case STOPWATCH:
 252   2              recordNum = 0;
 253   2              ClearChar(line1);
 254   2              ClearChar(line2);
 255   2              ClearChar(line3);
 256   2              ClearChar(line4);
 257   2      
 258   2              stopwatchMinute = 0;
 259   2              stopwatchSecond = 0;
 260   2              stopwatchMSecond = 0;
 261   2      
 262   2              line1[4] = stopwatchMinute / 10 + '0'; // 分钟十位
 263   2              line1[5] = stopwatchMinute % 10 + '0'; // 分钟个位
 264   2              line1[6] = ':';
 265   2              line1[7] = stopwatchSecond / 10 + '0'; // 秒十位
 266   2              line1[8] = stopwatchSecond % 10 + '0'; // 秒个位
 267   2              line1[9] = ':';
 268   2              line1[10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 269   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 270   2      
 271   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 272   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 273   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 274   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 275   2      
 276   2              break;
 277   2          case ALARMCLOCK:
 278   2              ClearChar(line1);
 279   2              ClearChar(line2);
 280   2              ClearChar(line3);
 281   2              ClearChar(line4);
 282   2              setAlarmHour = alarmHour;
 283   2              setAlarmMinute = alarmMinute;
 284   2              setAlarmWeekday = alarmWeekday;
 285   2              line1[5] = alarmHour / 10 + '0';
 286   2              line1[6] = alarmHour % 10 + '0';
 287   2              line1[7] = ':';
 288   2              line1[8] = alarmMinute / 10 + '0';
 289   2              line1[9] = alarmMinute % 10 + '0';
 290   2              for (i = 0; i < 7; i++)
 291   2              {
 292   3                  if (alarmWeekday & (1 << i))
 293   3                      strncpy(line3 + 2 * i, "开", 2);
 294   3                  else
 295   3                      strncpy(line3 + 2 * i, "关", 2);
 296   3              }
 297   2              if (alarm)
 298   2                  strncpy(line3 + 14, "开", 2);
 299   2              else
 300   2                  strncpy(line3 + 14, "关", 2);
 301   2              strcpy(line4, "日一二");
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 6   

 302   2              line4[6] = 0xC8;
 303   2              line4[7] = 0xFD;
 304   2              strcpy(line4 + 8, "四五六总");
 305   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 306   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 307   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 308   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 309   2          default:
 310   2              break;
 311   2          }
 312   1      }
 313          
 314          // 检查当前按键是长按还是短按
 315          void Check()
 316          {
 317   1          checkCount++; // 按键时间计数
 318   1      
 319   1          if (checkCount < 10 / INTERVAL) // 10ms延迟去抖动
 320   1              return;
 321   1      
 322   1          if (checkCount > 1010 / INTERVAL) // 如果按下时间大于一秒，为长按。
 323   1          {
 324   2              shortOrLang = 2;
 325   2              checkCount = 0;
 326   2              buttonDown = 0;
 327   2          }
 328   1          else // 如果按下时间小于一秒，则判断是否松开，若松开，则为短按，否则继续计数。
 329   1          {
 330   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 331   2              {
 332   3                  shortOrLang = 1;
 333   3                  checkCount = 0;
 334   3                  buttonDown = 0;
 335   3              }
 336   2          }
 337   1      }
 338          
 339          // 按键短按处理程序
 340          void ShortPress()
 341          {
 342   1          if (button == 0) // 如果按的是键A
 343   1          {
 344   2              switch (mode)
 345   2              {
 346   3              case SHOW:
 347   3                  ChangeMode(STOPWATCH);
 348   3                  break;
 349   3              case STOPWATCH:
 350   3                  ChangeMode(ALARMCLOCK);
 351   3                  break;
 352   3              case STOPWATCH_START:
 353   3              case STOPWATCH_PAUSE:
 354   3                  recordNum++;
 355   3                  if (recordNum % 3 == 1)
 356   3                  {
 357   4      
 358   4                      ClearChar(line2);
 359   4                      line2[0] = (recordNum % 1000) / 100 + '0';
 360   4                      line2[1] = (recordNum % 100) / 10 + '0';
 361   4                      line2[2] = (recordNum % 10) + '0';
 362   4                      line2[4] = stopwatchMinute / 10 + '0'; // 分钟十位
 363   4                      line2[5] = stopwatchMinute % 10 + '0'; // 分钟个位
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 7   

 364   4                      line2[6] = ':';
 365   4                      line2[7] = stopwatchSecond / 10 + '0'; // 秒十位
 366   4                      line2[8] = stopwatchSecond % 10 + '0'; // 秒个位
 367   4                      line2[9] = ':';
 368   4                      line2[10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 369   4                      line2[11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 370   4      
 371   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 372   4                  }
 373   3                  else if (recordNum % 3 == 2)
 374   3                  {
 375   4                      ClearChar(line3);
 376   4                      line3[0] = (recordNum % 1000) / 100 + '0';
 377   4                      line3[1] = (recordNum % 100) / 10 + '0';
 378   4                      line3[2] = (recordNum % 10) + '0';
 379   4                      line3[4] = stopwatchMinute / 10 + '0'; // 分钟十位
 380   4                      line3[5] = stopwatchMinute % 10 + '0'; // 分钟个位
 381   4                      line3[6] = ':';
 382   4                      line3[7] = stopwatchSecond / 10 + '0'; // 秒十位
 383   4                      line3[8] = stopwatchSecond % 10 + '0'; // 秒个位
 384   4                      line3[9] = ':';
 385   4                      line3[10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 386   4                      line3[11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 387   4                      LCD12864_DisplayOneLine(LINE3, line3, 16);
 388   4                  }
 389   3                  else
 390   3                  {
 391   4                      ClearChar(line4);
 392   4                      line4[0] = (recordNum % 1000) / 100 + '0';
 393   4                      line4[1] = (recordNum % 100) / 10 + '0';
 394   4                      line4[2] = (recordNum % 10) + '0';
 395   4                      line4[4] = stopwatchMinute / 10 + '0'; // 分钟十位
 396   4                      line4[5] = stopwatchMinute % 10 + '0'; // 分钟个位
 397   4                      line4[6] = ':';
 398   4                      line4[7] = stopwatchSecond / 10 + '0'; // 秒十位
 399   4                      line4[8] = stopwatchSecond % 10 + '0'; // 秒个位
 400   4                      line4[9] = ':';
 401   4                      line4[10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 402   4                      line4[11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 403   4                      LCD12864_DisplayOneLine(LINE4, line4, 16);
 404   4                  }
 405   3      
 406   3                  break;
 407   3              case ALARMCLOCK:
 408   3                  ChangeMode(SHOW);
 409   3                  break;
 410   3              case SET_HOUR:
 411   3                  line1[4] = setHour / 10 + '0';
 412   3                  line1[5] = setHour % 10 + '0';
 413   3                  ChangeMode(SET_MINUTE);
 414   3                  break;
 415   3              case SET_MINUTE:
 416   3                  line1[7] = setMinute / 10 + '0';
 417   3                  line1[8] = setMinute % 10 + '0';
 418   3                  ChangeMode(SET_SECOND);
 419   3                  break;
 420   3              case SET_SECOND:
 421   3                  line1[10] = setSecond / 10 + '0';
 422   3                  line1[11] = setSecond % 10 + '0';
 423   3                  ChangeMode(SET_HOUR);
 424   3                  break;
 425   3              case SET_YEAR:
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 8   

 426   3                  line2[3] = year / 1000 + '0';     // 年份千位
 427   3                  line2[4] = year / 100 % 10 + '0'; // 年份百位
 428   3                  line2[5] = year / 10 % 10 + '0';  // 年份十位
 429   3                  line2[6] = year % 10 + '0';       // 年份个位
 430   3                  ChangeMode(SET_MONTH);
 431   3                  break;
 432   3              case SET_MONTH:
 433   3                  line2[8] = month / 10 + '0'; // 月份十位
 434   3                  line2[9] = month % 10 + '0'; // 月份个位
 435   3                  ChangeMode(SET_DAY);
 436   3                  break;
 437   3              case SET_DAY:
 438   3                  line2[11] = day / 10 + '0'; // 日期十位
 439   3                  line2[12] = day % 10 + '0'; // 日期个位
 440   3                  ChangeMode(SET_YEAR);
 441   3                  break;
 442   3              case SET_ALARMCLOCK_HOUR:
 443   3                  line1[5] = setAlarmHour / 10 + '0';
 444   3                  line1[6] = setAlarmHour % 10 + '0';
 445   3                  ChangeMode(SET_ALARMCLOCK_MINUTE);
 446   3                  break;
 447   3              case SET_ALARMCLOCK_MINUTE:
 448   3                  line1[8] = setAlarmMinute / 10 + '0';
 449   3                  line1[9] = setAlarmMinute % 10 + '0';
 450   3                  ChangeMode(SET_ALARMCLOCK_SUNDAY);
 451   3                  break;
 452   3              case SET_ALARMCLOCK_SUNDAY:
 453   3                  if (setAlarmWeekday & (1 << 0))
 454   3                      strncpy(line3 + 0, "开", 2);
 455   3                  else
 456   3                      strncpy(line3 + 0, "关", 2);
 457   3                  ChangeMode(SET_ALARMCLOCK_MONDAY);
 458   3                  break;
 459   3              case SET_ALARMCLOCK_MONDAY:
 460   3                  if (setAlarmWeekday & (1 << 1))
 461   3                      strncpy(line3 + 2, "开", 2);
 462   3                  else
 463   3                      strncpy(line3 + 2, "关", 2);
 464   3                  ChangeMode(SET_ALARMCLOCK_TUESDAY);
 465   3                  break;
 466   3              case SET_ALARMCLOCK_TUESDAY:
 467   3                  if (setAlarmWeekday & (1 << 2))
 468   3                      strncpy(line3 + 4, "开", 2);
 469   3                  else
 470   3                      strncpy(line3 + 4, "关", 2);
 471   3                  ChangeMode(SET_ALARMCLOCK_WEDNESDAY);
 472   3                  break;
 473   3              case SET_ALARMCLOCK_WEDNESDAY:
 474   3                  if (setAlarmWeekday & (1 << 3))
 475   3                      strncpy(line3 + 6, "开", 2);
 476   3                  else
 477   3                      strncpy(line3 + 6, "关", 2);
 478   3                  ChangeMode(SET_ALARMCLOCK_THURSDAY);
 479   3                  break;
 480   3              case SET_ALARMCLOCK_THURSDAY:
 481   3                  if (setAlarmWeekday & (1 << 4))
 482   3                      strncpy(line3 + 8, "开", 2);
 483   3                  else
 484   3                      strncpy(line3 + 8, "关", 2);
 485   3                  ChangeMode(SET_ALARMCLOCK_FRIDAY);
 486   3                  break;
 487   3              case SET_ALARMCLOCK_FRIDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 9   

 488   3                  if (setAlarmWeekday & (1 << 5))
 489   3                      strncpy(line3 + 10, "开", 2);
 490   3                  else
 491   3                      strncpy(line3 + 10, "关", 2);
 492   3                  ChangeMode(SET_ALARMCLOCK_SATURDAY);
 493   3                  break;
 494   3              case SET_ALARMCLOCK_SATURDAY:
 495   3                  if (setAlarmWeekday & (1 << 6))
 496   3                      strncpy(line3 + 12, "开", 2);
 497   3                  else
 498   3                      strncpy(line3 + 12, "关", 2);
 499   3                  ChangeMode(SET_ALARMCLOCK_HOUR);
 500   3                  break;
 501   3              default:
 502   3                  break;
 503   3              }
 504   2          }
 505   1          else
 506   1          {
 507   2              switch (mode)
 508   2              {
 509   3              case SHOW:
 510   3                  hourlyChime = !hourlyChime;
 511   3                  strncpy(line4 + 2, "整点报时  ", 10);
 512   3                  if (hourlyChime)
 513   3                  {
 514   4                      AT24C02_Write(HOURLY_CHIME_ADDR, 0x01);
 515   4                      strncpy(line4 + 12, "开", 2);
 516   4                  }
 517   3                  else
 518   3                  {
 519   4                      AT24C02_Write(HOURLY_CHIME_ADDR, 0x00);
 520   4                      strncpy(line4 + 12, "关", 2);
 521   4                  }
 522   3      
 523   3                  LCD12864_DisplayOneLine(LINE4, line4, 16);
 524   3                  break;
 525   3              case SET_YEAR:
 526   3                  year++;
 527   3                  year %= 10000;
 528   3      
 529   3                  UpdateWeekday();
 530   3                  break;
 531   3              case SET_MONTH:
 532   3                  month = (month % 12) + 1;
 533   3      
 534   3                  UpdateWeekday();
 535   3                  break;
 536   3              case SET_DAY:
 537   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // 闰年2月
 538   3                      day = (day % 29) + 1;
 539   3                  else
 540   3                      day = (day % Seg_Date[month - 1]) + 1;
 541   3      
 542   3                  UpdateWeekday();
 543   3                  break;
 544   3              case SET_HOUR:
 545   3                  setHour++;
 546   3                  setHour %= 24;
 547   3      
 548   3                  break;
 549   3              case SET_MINUTE:
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 10  

 550   3                  setMinute++;
 551   3                  setMinute %= 60;
 552   3      
 553   3                  break;
 554   3              case SET_SECOND:
 555   3                  setSecond++;
 556   3                  setSecond %= 60;
 557   3      
 558   3                  break;
 559   3              case STOPWATCH:
 560   3                  ChangeMode(STOPWATCH_START);
 561   3                  break;
 562   3              case STOPWATCH_START:
 563   3                  ChangeMode(STOPWATCH_PAUSE);
 564   3                  break;
 565   3              case STOPWATCH_PAUSE:
 566   3                  ChangeMode(STOPWATCH_START);
 567   3                  break;
 568   3              case ALARMCLOCK:
 569   3                  alarm = !alarm;
 570   3                  if (alarm)
 571   3                  {
 572   4                      AT24C02_Write(ALARM_ADDR, 0x01);
 573   4                      strncpy(line3 + 14, "开", 2);
 574   4                  }
 575   3      
 576   3                  else
 577   3                  {
 578   4                      AT24C02_Write(ALARM_ADDR, 0x00);
 579   4                      strncpy(line3 + 14, "关", 2);
 580   4                  }
 581   3      
 582   3                  LCD12864_DisplayOneLine(LINE3, line3, 16);
 583   3                  break;
 584   3              case SET_ALARMCLOCK_HOUR:
 585   3                  setAlarmHour++;
 586   3                  setAlarmHour %= 24;
 587   3      
 588   3                  break;
 589   3              case SET_ALARMCLOCK_MINUTE:
 590   3                  setAlarmMinute++;
 591   3                  setAlarmMinute %= 60;
 592   3      
 593   3                  break;
 594   3              case SET_ALARMCLOCK_SUNDAY:
 595   3      
 596   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 0); // 低0位取反
 597   3      
 598   3                  break;
 599   3              case SET_ALARMCLOCK_MONDAY:
 600   3      
 601   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 1); // 低1位取反
 602   3      
 603   3                  break;
 604   3              case SET_ALARMCLOCK_TUESDAY:
 605   3      
 606   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 2); // 低2位取反
 607   3      
 608   3                  break;
 609   3              case SET_ALARMCLOCK_WEDNESDAY:;
 610   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 3); // 低3位取反
 611   3      
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 11  

 612   3                  break;
 613   3              case SET_ALARMCLOCK_THURSDAY:
 614   3      
 615   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 4); // 低4位取反
 616   3      
 617   3                  break;
 618   3              case SET_ALARMCLOCK_FRIDAY:
 619   3      
 620   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 5); // 低5位取反
 621   3      
 622   3                  break;
 623   3              case SET_ALARMCLOCK_SATURDAY:
 624   3      
 625   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 6); // 低6位取反
 626   3      
 627   3                  break;
 628   3              default:
 629   3                  break;
 630   3              }
 631   2          }
 632   1      
 633   1          shortOrLang = 0; // 重置按键标志
 634   1      }
 635          
 636          // 按键长按处理程序
 637          void LongPress()
 638          {
 639   1          if (button == 0) // 如果按的是键A
 640   1          {
 641   2              switch (mode)
 642   2              {
 643   3              case SHOW:
 644   3                  setHour = hour;
 645   3                  setMinute = minute;
 646   3                  setSecond = second;
 647   3                  ChangeMode(SET_HOUR);
 648   3                  break;
 649   3              case SET_YEAR:
 650   3              case SET_MONTH:
 651   3              case SET_DAY:
 652   3                  if (!CheckDate(year, month, day)) // 如果日期无误才能确定
 653   3                  {
 654   4                      AT24C02_Write(YEAR_ADDR_L, year % 256);
 655   4                      AT24C02_Write(YEAR_ADDR_H, year / 256);
 656   4                      AT24C02_Write(MONTH_ADDR, month);
 657   4                      AT24C02_Write(DAY_ADDR, day);
 658   4                      ChangeMode(SHOW);
 659   4                  }
 660   3                  break;
 661   3              case SET_HOUR:
 662   3              case SET_MINUTE:
 663   3              case SET_SECOND:
 664   3                  hour = setHour;
 665   3                  minute = setMinute;
 666   3                  second = setSecond;
 667   3                  AT24C02_Write(HOUR_ADDR, hour);
 668   3                  AT24C02_Write(MINUTE_ADDR, minute);
 669   3                  AT24C02_Write(SECOND_ADDR, second);
 670   3                  ChangeMode(SHOW);
 671   3                  break;
 672   3              case ALARMCLOCK:
 673   3                  mode = SET_ALARMCLOCK_HOUR;
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 12  

 674   3                  break;
 675   3              case SET_ALARMCLOCK_HOUR:
 676   3              case SET_ALARMCLOCK_MINUTE:
 677   3              case SET_ALARMCLOCK_SUNDAY:
 678   3              case SET_ALARMCLOCK_MONDAY:
 679   3              case SET_ALARMCLOCK_TUESDAY:
 680   3              case SET_ALARMCLOCK_WEDNESDAY:
 681   3              case SET_ALARMCLOCK_THURSDAY:
 682   3              case SET_ALARMCLOCK_FRIDAY:
 683   3              case SET_ALARMCLOCK_SATURDAY:
 684   3                  alarmHour = setAlarmHour;
 685   3                  alarmMinute = setAlarmMinute;
 686   3                  alarmWeekday = setAlarmWeekday;
 687   3                  AT24C02_Write(ALARM_HOUR_ADDR, alarmHour);
 688   3                  AT24C02_Write(ALARM_MINUTE_ADDR, alarmMinute);
 689   3                  AT24C02_Write(ALARM_WEEKDAY_ADDR, alarmWeekday);
 690   3                  ChangeMode(ALARMCLOCK);
 691   3                  break;
 692   3              default:
 693   3                  break;
 694   3              }
 695   2          }
 696   1          else
 697   1          {
 698   2              switch (mode)
 699   2              {
 700   3              case SHOW:
 701   3                  ChangeMode(SET_YEAR);
 702   3                  break;
 703   3              case SET_HOUR:
 704   3              case SET_MINUTE:
 705   3              case SET_SECOND:
 706   3                  ChangeMode(SHOW);
 707   3                  break;
 708   3              case SET_YEAR:
 709   3                  year--;
 710   3                  year %= 10000;
 711   3      
 712   3                  UpdateWeekday();
 713   3                  break;
 714   3              case SET_MONTH:
 715   3                  month += 10;
 716   3                  month = (month % 12) + 1;
 717   3      
 718   3                  UpdateWeekday();
 719   3                  break;
 720   3              case SET_DAY:
 721   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 722   3                  {
 723   4                      day += 29 - 2;
 724   4                      day = (day % 29) + 1;
 725   4                  }
 726   3                  else
 727   3                  {
 728   4                      day += Seg_Date[month - 1] - 2;
 729   4                      day = (day % Seg_Date[month - 1]) + 1;
 730   4                  }
 731   3      
 732   3                  UpdateWeekday();
 733   3                  break;
 734   3              case STOPWATCH_PAUSE:
 735   3                  ChangeMode(STOPWATCH);
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 13  

 736   3                  break;
 737   3              case SET_ALARMCLOCK_HOUR:
 738   3              case SET_ALARMCLOCK_MINUTE:
 739   3              case SET_ALARMCLOCK_SUNDAY:
 740   3              case SET_ALARMCLOCK_MONDAY:
 741   3              case SET_ALARMCLOCK_TUESDAY:
 742   3              case SET_ALARMCLOCK_WEDNESDAY:
 743   3              case SET_ALARMCLOCK_THURSDAY:
 744   3              case SET_ALARMCLOCK_FRIDAY:
 745   3              case SET_ALARMCLOCK_SATURDAY:
 746   3                  setAlarmHour = alarmHour;
 747   3                  setAlarmMinute = alarmMinute;
 748   3                  setAlarmWeekday = alarmWeekday;
 749   3                  ChangeMode(ALARMCLOCK);
 750   3                  break;
 751   3              default:
 752   3                  break;
 753   3              }
 754   2          }
 755   1      
 756   1          shortOrLang = 0; // 重置按键标志
 757   1      }
 758          
 759          // 秒数增加处理程序
 760          void SecondIncrease()
 761          {
 762   1          second++;
 763   1          if (second > 59)
 764   1          {
 765   2              second = 0;
 766   2              minute++;
 767   2          }
 768   1      
 769   1          if (minute > 59)
 770   1          {
 771   2              minute = 0;
 772   2              hour++;
 773   2          }
 774   1      
 775   1          if (hour > 23)
 776   1          {
 777   2              hour = 0;
 778   2          }
 779   1      }
 780          
 781          // 日期增加处理程序
 782          void DateIncrease()
 783          {
 784   1          day++;
 785   1          if (CheckDate(year, month, day))
 786   1          {
 787   2              day = 1;
 788   2              month++;
 789   2              if (month > 12)
 790   2              {
 791   3                  month = 1;
 792   3                  year++;
 793   3              }
 794   2          }
 795   1      }
 796          
 797          // 更新日期
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 14  

 798          void UpdateWeekday()
 799          {
 800   1          weekday = (month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) - 
             -1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1;
 801   1          while (weekday < 0)
 802   1          {
 803   2              weekday += 7;
 804   2          }
 805   1          weekday %= 7;
 806   1          ClearChar(line3);
 807   1      
 808   1          switch (weekday)
 809   1          {
 810   2          case 0:
 811   2              strncpy(line3 + 6, "周日", 4);
 812   2              break;
 813   2          case 1:
 814   2              strncpy(line3 + 6, "周一", 4);
 815   2              break;
 816   2          case 2:
 817   2              strncpy(line3 + 6, "周二", 4);
 818   2              break;
 819   2          case 3:
 820   2              strncpy(line3 + 6, "周", 2);
 821   2              line3[8] = 0xC8;
 822   2              line3[9] = 0xFD;
 823   2              break;
 824   2          case 4:
 825   2              strncpy(line3 + 6, "周四", 4);
 826   2              break;
 827   2          case 5:
 828   2              strncpy(line3 + 6, "周五", 4);
 829   2              break;
 830   2          case 6:
 831   2              strncpy(line3 + 6, "周六", 4);
 832   2              break;
 833   2          default:
 834   2              break;
 835   2          }
 836   1      
 837   1          LCD12864_DisplayOneLine(LINE3, line3, 16);
 838   1      }
 839          
 840          // 检查日期程序，返回0表示日期无误，返回1表示日期有误
 841          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 842          {
 843   1          if (month > 12 || month < 1)
 844   1              return 1; // 月份有误
 845   1      
 846   1          if (day < 1)
 847   1              return 1; // 日期有误
 848   1      
 849   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 850   1          {
 851   2              if (day > 29)
 852   2                  return 1; // 闰年2月29日有误
 853   2          }
 854   1          else
 855   1          {
 856   2              if (day > Seg_Date[month - 1])
 857   2                  return 1;
 858   2          }
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 15  

 859   1      
 860   1          return 0;
 861   1      }
 862          
 863          void ClearChar(unsigned char *str)
 864          {
 865   1          unsigned char len = strlen(str);
 866   1          unsigned char i = 0;
 867   1          for (i = 0; i < len; i++)
 868   1          {
 869   2              str[i] = ' ';
 870   2          }
 871   1      }
 872          
 873          void Int0() interrupt 0
 874          {
 875   1          if (buttonDown == 0)
 876   1          {
 877   2              buttonDown = 1;
 878   2              button = 0;
 879   2          }
 880   1      }
 881          
 882          void Int1() interrupt 2
 883          {
 884   1          if (buttonDown == 0)
 885   1          {
 886   2              buttonDown = 1;
 887   2              button = 1;
 888   2          }
 889   1      }
 890          
 891          // 定时器0中断服务函数
 892          void Timer0() interrupt 1
 893          {
 894   1          interruptCount++;
 895   1      
 896   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 897   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 898   1      
 899   1          if (interruptCount == (1000 / INTERVAL))
 900   1          { // 1秒
 901   2              interruptCount = 0;
 902   2              SecondIncrease();
 903   2              AT24C02_Write(HOUR_ADDR, hour);
 904   2              AT24C02_Write(MINUTE_ADDR, minute);
 905   2              AT24C02_Write(SECOND_ADDR, second);
 906   2              if (mode == SHOW)
 907   2              {
 908   3                  ClearChar(line1);
 909   3      
 910   3                  line1[4] = hour / 10 + '0'; // 小时十位
 911   3                  line1[5] = hour % 10 + '0'; // 小时个位
 912   3                  line1[6] = ':';
 913   3                  line1[7] = minute / 10 + '0'; // 分钟十位
 914   3                  line1[8] = minute % 10 + '0'; // 分钟个位
 915   3                  line1[9] = ':';
 916   3                  line1[10] = second / 10 + '0'; // 秒钟十位
 917   3                  line1[11] = second % 10 + '0'; // 秒钟个位
 918   3      
 919   3                  LCD12864_DisplayOneLine(LINE1, line1, 16);
 920   3              }
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 16  

 921   2              if (hour == 0 && minute == 0 && second == 0)
 922   2              {
 923   3                  DateIncrease();
 924   3                  UpdateWeekday();
 925   3                  AT24C02_Write(YEAR_ADDR_L, year % 256);
 926   3                  AT24C02_Write(YEAR_ADDR_H, year / 256);
 927   3                  AT24C02_Write(MONTH_ADDR, month);
 928   3                  AT24C02_Write(DAY_ADDR, day);
 929   3                  if (mode == SHOW)
 930   3                  {
 931   4                      ClearChar(line2);
 932   4      
 933   4                      line2[3] = year / 1000 + '0';     // 年份千位
 934   4                      line2[4] = year / 100 % 10 + '0'; // 年份百位
 935   4                      line2[5] = year / 10 % 10 + '0';  // 年份十位
 936   4                      line2[6] = year % 10 + '0';       // 年份个位
 937   4                      line2[7] = '-';
 938   4                      line2[8] = month / 10 + '0'; // 月份十位
 939   4                      line2[9] = month % 10 + '0'; // 月份个位
 940   4                      line2[10] = '-';
 941   4                      line2[11] = day / 10 + '0'; // 日期十位
 942   4                      line2[12] = day % 10 + '0'; // 日期个位
 943   4      
 944   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 945   4                  }
 946   3              }
 947   2          }
 948   1      
 949   1          if (buttonDown == 1)
 950   1          {
 951   2              Check();
 952   2          }
 953   1      
 954   1          if (shortOrLang == 1)
 955   1          {
 956   2              ShortPress();
 957   2          }
 958   1          else if (shortOrLang == 2)
 959   1          {
 960   2              LongPress();
 961   2          }
 962   1      
 963   1          if (mode == SHOW && alarm == 1)
 964   1          {
 965   2              if (hour == alarmHour && minute == alarmMinute && second == 00 && (alarmWeekday & (1 << weekday)) 
             -> 0 && interruptCount == 0)
 966   2                  alarmClockTimes = 2 * ALARMCLOCKTIMES;
 967   2              if (alarmClockTimes != 0)
 968   2              {
 969   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 970   3                      Chime = !Chime;
 971   3                  else
 972   3                      Chime = 0;
 973   3                  if (interruptCount % (250 / INTERVAL) == 0)
 974   3                  {
 975   4                      alarmClockTimes--;
 976   4                      Chime = 0;
 977   4                  }
 978   3              }
 979   2          }
 980   1      
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 17  

 981   1          if (mode == SHOW && hourlyChime == 1 && minute == 0 && second < 3)
 982   1          {
 983   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 984   2                  hourlyChimeTimes = 2 * (HOURLYCHIMETIMES + 1); // 我也不知道这里为什么要加一，但事实就是它会响
             -HOURLYCHIMETIMES-1次，所以要加一补上。
 985   2              if (hourlyChimeTimes != 0)
 986   2              {
 987   3                  if (interruptCount > (500 / INTERVAL))
 988   3                      Chime = !Chime;
 989   3                  else
 990   3                      Chime = 0;
 991   3                  if (interruptCount % (500 / INTERVAL) == 0)
 992   3                  {
 993   4                      hourlyChimeTimes--;
 994   4                      Chime = 0;
 995   4                  }
 996   3              }
 997   2          }
 998   1      
 999   1          switch (mode)
1000   1          {
1001   2          case SET_HOUR:
1002   2              if (interruptCount < (500 / INTERVAL))
1003   2              {
1004   3                  line1[4] = setHour / 10 + '0';
1005   3                  line1[5] = setHour % 10 + '0';
1006   3              }
1007   2              else
1008   2              {
1009   3                  line1[4] = ' ';
1010   3                  line1[5] = ' ';
1011   3              }
1012   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1013   2              break;
1014   2          case SET_MINUTE:
1015   2              if (interruptCount < (500 / INTERVAL))
1016   2              {
1017   3                  line1[7] = setMinute / 10 + '0';
1018   3                  line1[8] = setMinute % 10 + '0';
1019   3              }
1020   2              else
1021   2              {
1022   3                  line1[7] = ' ';
1023   3                  line1[8] = ' ';
1024   3              }
1025   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1026   2              break;
1027   2          case SET_SECOND:
1028   2              if (interruptCount < (500 / INTERVAL))
1029   2              {
1030   3                  line1[10] = setSecond / 10 + '0';
1031   3                  line1[11] = setSecond % 10 + '0';
1032   3              }
1033   2              else
1034   2              {
1035   3                  line1[10] = ' ';
1036   3                  line1[11] = ' ';
1037   3              }
1038   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1039   2              break;
1040   2          case SET_YEAR:
1041   2              if (interruptCount < (500 / INTERVAL))
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 18  

1042   2              {
1043   3                  line2[3] = year / 1000 + '0';     // 年份千位
1044   3                  line2[4] = year / 100 % 10 + '0'; // 年份百位
1045   3                  line2[5] = year / 10 % 10 + '0';  // 年份十位
1046   3                  line2[6] = year % 10 + '0';       // 年份个位
1047   3              }
1048   2              else
1049   2              {
1050   3                  line2[3] = ' ';
1051   3                  line2[4] = ' ';
1052   3                  line2[5] = ' ';
1053   3                  line2[6] = ' ';
1054   3              }
1055   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
1056   2              break;
1057   2          case SET_MONTH:
1058   2              if (interruptCount < (500 / INTERVAL))
1059   2              {
1060   3                  line2[8] = month / 10 + '0'; // 月份十位
1061   3                  line2[9] = month % 10 + '0'; // 月份个位
1062   3              }
1063   2              else
1064   2              {
1065   3                  line2[8] = ' ';
1066   3                  line2[9] = ' ';
1067   3              }
1068   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
1069   2              break;
1070   2          case SET_DAY:
1071   2              if (interruptCount < (500 / INTERVAL))
1072   2              {
1073   3                  line2[11] = day / 10 + '0'; // 日期十位
1074   3                  line2[12] = day % 10 + '0'; // 日期个位
1075   3              }
1076   2              else
1077   2              {
1078   3                  line2[11] = ' ';
1079   3                  line2[12] = ' ';
1080   3              }
1081   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
1082   2              break;
1083   2          case STOPWATCH_START:
1084   2              stopwatchMSecond += INTERVAL;
1085   2              if (stopwatchMSecond > 999)
1086   2              {
1087   3                  stopwatchMSecond = 0;
1088   3                  stopwatchSecond++;
1089   3              }
1090   2              if (stopwatchSecond > 59)
1091   2              {
1092   3                  stopwatchSecond = 0;
1093   3                  stopwatchMinute++;
1094   3              }
1095   2              if (stopwatchMinute > 59)
1096   2              {
1097   3                  stopwatchMinute = 0;
1098   3              }
1099   2              line1[4] = stopwatchMinute / 10 + '0'; // 分钟十位
1100   2              line1[5] = stopwatchMinute % 10 + '0'; // 分钟个位
1101   2              line1[6] = ':';
1102   2              line1[7] = stopwatchSecond / 10 + '0'; // 秒十位
1103   2              line1[8] = stopwatchSecond % 10 + '0'; // 秒个位
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 19  

1104   2              line1[9] = ':';
1105   2              line1[10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
1106   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
1107   2      
1108   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1109   2      
1110   2              break;
1111   2          case SET_ALARMCLOCK_HOUR:
1112   2              if (interruptCount < (500 / INTERVAL))
1113   2              {
1114   3                  line1[5] = setAlarmHour / 10 + '0';
1115   3                  line1[6] = setAlarmHour % 10 + '0';
1116   3              }
1117   2              else
1118   2              {
1119   3                  line1[5] = ' ';
1120   3                  line1[6] = ' ';
1121   3              }
1122   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1123   2              break;
1124   2          case SET_ALARMCLOCK_MINUTE:
1125   2              if (interruptCount < (500 / INTERVAL))
1126   2              {
1127   3                  line1[8] = setAlarmMinute / 10 + '0';
1128   3                  line1[9] = setAlarmMinute % 10 + '0';
1129   3              }
1130   2              else
1131   2              {
1132   3                  line1[8] = ' ';
1133   3                  line1[9] = ' ';
1134   3              }
1135   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
1136   2              break;
1137   2          case SET_ALARMCLOCK_SUNDAY:
1138   2              if (interruptCount < (500 / INTERVAL))
1139   2              {
1140   3                  if (setAlarmWeekday & (1 << 0))
1141   3                      strncpy(line3 + 0, "开", 2);
1142   3                  else
1143   3                      strncpy(line3 + 0, "关", 2);
1144   3              }
1145   2              else
1146   2              {
1147   3                  line3[0] = ' ';
1148   3                  line3[1] = ' ';
1149   3              }
1150   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1151   2              break;
1152   2          case SET_ALARMCLOCK_MONDAY:
1153   2              if (interruptCount < (500 / INTERVAL))
1154   2              {
1155   3                  if (setAlarmWeekday & (1 << 1))
1156   3                      strncpy(line3 + 2, "开", 2);
1157   3                  else
1158   3                      strncpy(line3 + 2, "关", 2);
1159   3              }
1160   2              else
1161   2              {
1162   3                  line3[2] = ' ';
1163   3                  line3[3] = ' ';
1164   3              }
1165   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 20  

1166   2              break;
1167   2          case SET_ALARMCLOCK_TUESDAY:
1168   2              if (interruptCount < (500 / INTERVAL))
1169   2              {
1170   3                  if (setAlarmWeekday & (1 << 2))
1171   3                      strncpy(line3 + 4, "开", 2);
1172   3                  else
1173   3                      strncpy(line3 + 4, "关", 2);
1174   3              }
1175   2              else
1176   2              {
1177   3                  line3[4] = ' ';
1178   3                  line3[5] = ' ';
1179   3              }
1180   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1181   2              break;
1182   2          case SET_ALARMCLOCK_WEDNESDAY:
1183   2              if (interruptCount < (500 / INTERVAL))
1184   2              {
1185   3                  if (setAlarmWeekday & (1 << 3))
1186   3                      strncpy(line3 + 6, "开", 2);
1187   3                  else
1188   3                      strncpy(line3 + 6, "关", 2);
1189   3              }
1190   2              else
1191   2              {
1192   3                  line3[6] = ' ';
1193   3                  line3[7] = ' ';
1194   3              }
1195   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1196   2              break;
1197   2          case SET_ALARMCLOCK_THURSDAY:
1198   2              if (interruptCount < (500 / INTERVAL))
1199   2              {
1200   3                  if (setAlarmWeekday & (1 << 4))
1201   3                      strncpy(line3 + 8, "开", 2);
1202   3                  else
1203   3                      strncpy(line3 + 8, "关", 2);
1204   3              }
1205   2              else
1206   2              {
1207   3                  line3[8] = ' ';
1208   3                  line3[9] = ' ';
1209   3              }
1210   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1211   2              break;
1212   2          case SET_ALARMCLOCK_FRIDAY:
1213   2              if (interruptCount < (500 / INTERVAL))
1214   2              {
1215   3                  if (setAlarmWeekday & (1 << 5))
1216   3                      strncpy(line3 + 10, "开", 2);
1217   3                  else
1218   3                      strncpy(line3 + 10, "关", 2);
1219   3              }
1220   2              else
1221   2              {
1222   3                  line3[10] = ' ';
1223   3                  line3[11] = ' ';
1224   3              }
1225   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1226   2              break;
1227   2          case SET_ALARMCLOCK_SATURDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/22/2023 16:15:47 PAGE 21  

1228   2              if (interruptCount < (500 / INTERVAL))
1229   2              {
1230   3                  if (setAlarmWeekday & (1 << 6))
1231   3                      strncpy(line3 + 12, "开", 2);
1232   3                  else
1233   3                      strncpy(line3 + 12, "关", 2);
1234   3              }
1235   2              else
1236   2              {
1237   3                  line3[12] = ' ';
1238   3                  line3[13] = ' ';
1239   3              }
1240   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
1241   2              break;
1242   2          default:
1243   2              break;
1244   2          }
1245   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6042    ----
   CONSTANT SIZE    =     78    ----
   XDATA SIZE       =     14    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     85       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
