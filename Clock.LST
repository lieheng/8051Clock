C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          #include "LCD12864.h"
   3          
   4          #include <string.h>
   5          
   6          #define INTERVAL 10 // ¼ä¸ô10ºÁÃë
   7          
   8          #define INIT_HOUR 23   // ³õÊ¼»¯Ğ¡Ê±
   9          #define INIT_MINUTE 59 // ³õÊ¼»¯·ÖÖÓ
  10          #define INIT_SECOND 58 // ³õÊ¼»¯Ãë
  11          
  12          #define INIT_YEAR 2020 // ³õÊ¼»¯Äê
  13          #define INIT_MONTH 2   // ³õÊ¼»¯ÔÂ
  14          #define INIT_DAY 28    // ³õÊ¼»¯ÈÕ
  15          
  16          #define INIT_ALARM 0         // ³õÊ¼»¯ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  17          #define INIT_ALARM_HOUR 23   // ³õÊ¼»¯ÄÖÖÓĞ¡Ê±
  18          #define INIT_ALARM_MINUTE 59 // ³õÊ¼»¯ÄÖÖÓ·ÖÖÓ
  19          #define INIT_ALARM_WEEKDAY 0 // ³õÊ¼»¯ÄÖÖÓĞÇÆÚ
  20          #define ALARMCLOCKTIMES 6    // ÄÖÖÓÏìÁå´ÎÊı
  21          
  22          #define INIT_HOURLY_CHIME 0 // ³õÊ¼»¯Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  23          #define HOURLYCHIMETIMES 3  // ÕûµãÏìÁå´ÎÊı
  24          
  25          unsigned char hour = INIT_HOUR;     // ³õÊ¼»¯Ğ¡Ê±
  26          unsigned char minute = INIT_MINUTE; // ³õÊ¼»¯·ÖÖÓ
  27          unsigned char second = INIT_SECOND; // ³õÊ¼»¯Ãë
  28          
  29          unsigned int year = INIT_YEAR;    // ³õÊ¼»¯Äê
  30          unsigned char month = INIT_MONTH; // ³õÊ¼»¯ÔÂ
  31          unsigned char day = INIT_DAY;     // ³õÊ¼»¯ÈÕ
  32          
  33          unsigned char weekday = 0; // ĞÇÆÚ£¬ĞÇÆÚ³õÊ¼»¯ÈÎÎñÓÉinit()º¯Êı¸ºÔğ
  34          
  35          unsigned char alarmHour = INIT_ALARM_HOUR;       // ÄÖÖÓÊ±
  36          unsigned char alarmMinute = INIT_ALARM_MINUTE;   // ÄÖÖÓ·Ö
  37          unsigned char alarmWeekday = INIT_ALARM_WEEKDAY; // ÄÖÖÓĞÇÆÚ¹¦ÄÜ£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ¾ÖÜÒ»Ïì£¬
             -ÒÔ´ËÀàÍÆ
  38          
  39          bit alarm = INIT_ALARM; // ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  40          
  41          bit hourlyChime = INIT_HOURLY_CHIME; // Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  42          
  43          bit buttonDown = 0;            // ÓÃÓÚÅĞ¶ÏÊÇ·ñÓĞ°´¼ü°´ÏÂ£¬1ÎªÓĞ£¬0ÎªÎŞ
  44          bit button = 0;                // ÓÃÓÚÅĞ¶Ï°´ÏÂµÄÊÇÄÄ¸ö°´¼ü
  45          unsigned int checkCount = 0;   // ÓÃÓÚ¼ì²é°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´£¬Ã¿°´Ò»ºÁÃë¸Ã±äÁ¿¼ÓÒ»
  46          unsigned char shortOrLang = 0; // ÓÃÓÚ±íÊ¾°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´µÄ±êÖ¾£¬0±íÊ¾ÎŞĞ§£¬1±íÊ¾¶Ì°´£¬2±íÊ¾³¤°´
  47          
  48          unsigned char line1[16] = "                ";
  49          unsigned char line2[16] = "                ";
  50          unsigned char line3[16] = "                ";
  51          unsigned char line4[16] = "                ";
  52          
  53          unsigned char hourlyChimeTimes = 0; // ¼ÇÂ¼Õûµã±¨Ê±µÄÏìÁå´ÎÊı
  54          unsigned char alarmClockTimes = 0;  // ¼ÇÂ¼ÄÖÖÓµÄÏìÁå´ÎÊı
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 2   

  55          
  56          unsigned int stopwatchMSecond = 0; // Ãë±íµÄºÁÃëÊı
  57          unsigned char stopwatchSecond = 0; // Ãë±íµÄÃëÊı
  58          unsigned char stopwatchMinute = 0; // Ãë±íµÄ·ÖÖÓÊı
  59          
  60          unsigned char setAlarmHour = INIT_ALARM_HOUR;       // ÉèÖÃÄÖÖÓÊ±µÄ±äÁ¿
  61          unsigned char setAlarmMinute = INIT_ALARM_MINUTE;   // ÉèÖÃÄÖÖÓ·ÖµÄ±äÁ¿
  62          unsigned char setAlarmWeekday = INIT_ALARM_WEEKDAY; // ÉèÖÃÄÖÖÓĞÇÆÚµÄ±äÁ¿£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ
             -¾ÖÜÒ»Ïì£¬ÒÔ´ËÀàÍÆ
  63          
  64          enum MODE
  65          {
  66              SHOW,                 // ÏÔÊ¾Ä£Ê½
  67              SET_YEAR,             // ÉèÖÃÄêÄ£Ê½
  68              SET_MONTH,            // ÉèÖÃÔÂÄ£Ê½
  69              SET_DAY,              // ÉèÖÃÈÕÄ£Ê½
  70              SET_HOUR,             // ÉèÖÃÊ±Ä£Ê½
  71              SET_MINUTE,           // ÉèÖÃ·ÖÄ£Ê½
  72              SET_SECOND,           // ÉèÖÃÃëÄ£Ê½
  73              STOPWATCH,            // Ãë±íÄ£Ê½
  74              STOPWATCH_START,      // Ãë±í¼ÆÊ±Ä£Ê½
  75              STOPWATCH_PAUSE,      // Ãë±íÔİÍ£Ä£Ê½
  76              ALARMCLOCK,           // ÄÖÖÓÄ£Ê½
  77              ALARMCLOCK_HOUR,      // ÉèÖÃÄÖÖÓÊ±Ä£Ê½
  78              ALARMCLOCK_MINUTE,    // ÉèÖÃÄÖÖÓ·ÖÄ£Ê½
  79              ALARMCLOCK_SUNDAY,    // ÉèÖÃÄÖÖÓÖÜÈÕÄ£Ê½
  80              ALARMCLOCK_MONDAY,    // ÉèÖÃÄÖÖÓÖÜÒ»Ä£Ê½
  81              ALARMCLOCK_TUESDAY,   // ÉèÖÃÄÖÖÓÖÜ¶şÄ£Ê½
  82              ALARMCLOCK_WEDNESDAY, // ÉèÖÃÄÖÖÓÖÜÈıÄ£Ê½
  83              ALARMCLOCK_THURSDAY,  // ÉèÖÃÄÖÖÓÖÜËÄÄ£Ê½
  84              ALARMCLOCK_FRIDAY,    // ÉèÖÃÄÖÖÓÖÜÎåÄ£Ê½
  85              ALARMCLOCK_SATURDAY   // ÉèÖÃÄÖÖÓÖÜÁùÄ£Ê½
  86          };
  87          
  88          unsigned char mode = SHOW; // Ä£Ê½
  89          
  90          unsigned int interruptCount = 0; // ÖĞ¶Ï´ÎÊı
  91          
  92          sbit Chime = P2 ^ 2; // ·äÃùÆ÷
  93          
  94          sbit P3_2 = P3 ^ 2; // Íâ²¿ÖĞ¶Ï0µÄ¿ØÖÆÒı½Å
  95          sbit P3_3 = P3 ^ 3; // Íâ²¿ÖĞ¶Ï1µÄ¿ØÖÆÒı½Å
  96          
  97          unsigned char code Seg_Date[] = {
  98              31, // 1ÔÂ
  99              28, // 2ÔÂ
 100              31, // 3ÔÂ
 101              30, // 4ÔÂ
 102              31, // 5ÔÂ
 103              30, // 6ÔÂ
 104              31, // 7ÔÂ
 105              31, // 8ÔÂ
 106              30, // 9ÔÂ
 107              31, // 10ÔÂ
 108              30, // 11ÔÂ
 109              31  // 12ÔÂ
 110          };
 111          
 112          // ³õÊ¼»¯º¯Êı
 113          void Init();
 114          // ÇĞ»»Ä£Ê½
 115          void ChangeMode(MODE);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 3   

 116          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 117          void Check();
 118          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 119          void ShortPress();
 120          // °´¼ü³¤°´´¦Àí³ÌĞò
 121          void LongPress();
 122          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 123          void SecondIncrease();
 124          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 125          void DateIncrease();
 126          // ¸üĞÂÈÕÆÚ
 127          void UpdateWeekday();
 128          // Çå¿Õ×Ö·û´®
 129          void ClearChar(unsigned char *str);
 130          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 131          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 132          
 133          void main()
 134          {
 135   1          Init();
 136   1          while (1)
 137   1          {
 138   2              ;
 139   2          }
 140   1      }
 141          
 142          // ³õÊ¼»¯º¯Êı
 143          void Init()
 144          {
 145   1      
 146   1          UpdateWeekday(); // ³õÊ¼»¯ĞÇÆÚ
 147   1      
 148   1          LCD12864_Init(); // ³õÊ¼»¯Òº¾§ÆÁ
 149   1      
 150   1          ChangeMode(SHOW);
 151   1      
 152   1          Chime = 0; // ³õÊ¼»¯·äÃùÆ÷Òı½ÅÎª0£¬·ÀÖ¹Ëğ»µ·äÃùÆ÷
 153   1      
 154   1          EA = 1;      // ¿ªÆô×ÜÖĞ¶Ï
 155   1          IT0 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï0Îª±ßÑØ´¥·¢·½Ê½
 156   1          EX0 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï0
 157   1          IT1 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï1Îª±ßÑØ´¥·¢·½Ê½
 158   1          EX1 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï1
 159   1          PT0 = 1;     // ¼ÆÊ±Æ÷0ÖĞ¶ÏÓÅÏÈ¼¶Îª×î¸ß
 160   1          TMOD = 0x01; // ÉèÖÃ¼ÆÊ±Æ÷0¹¤×÷ÔÚ·½Ê½1
 161   1          ET0 = 1;     // ÔÊĞí¼ÆÊ±Æ÷0ÖĞ¶Ï
 162   1          TR0 = 1;     // Æô¶¯¼ÆÊ±Æ÷
 163   1      
 164   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 165   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 166   1      }
 167          
 168          void ChangeMode(MODE)
 169          {
 170   1          mode = MODE;
 171   1          switch (mode)
 172   1          {
 173   2          case SHOW:
 174   2              ClearChar(line1);
 175   2              ClearChar(line2);
 176   2              ClearChar(line3);
 177   2              ClearChar(line4);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 4   

 178   2      
 179   2              line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 180   2              line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 181   2              line1[6] = ':';
 182   2              line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 183   2              line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 184   2              line1[9] = ':';
 185   2              line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 186   2              line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 187   2      
 188   2              line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 189   2              line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 190   2              line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 191   2              line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 192   2              line2[7] = '-';
 193   2              line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 194   2              line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 195   2              line2[10] = '-';
 196   2              line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 197   2              line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 198   2      
 199   2              switch (weekday)
 200   2              {
 201   3              case 0:
 202   3                  strncpy(line3 + 6, "ÖÜÈÕ", 4);
 203   3                  break;
 204   3              case 1:
 205   3                  strncpy(line3 + 6, "ÖÜÒ»", 4);
 206   3                  break;
 207   3              case 2:
 208   3                  strncpy(line3 + 6, "ÖÜ¶ş", 4);
 209   3                  break;
 210   3              case 3:
 211   3                  strncpy(line3 + 6, "ÖÜÈı", 4);
 212   3                  break;
 213   3              case 4:
 214   3                  strncpy(line3 + 6, "ÖÜËÄ", 4);
 215   3                  break;
 216   3              case 5:
 217   3                  strncpy(line3 + 6, "ÖÜÎå", 4);
 218   3                  break;
 219   3              case 6:
 220   3                  strncpy(line3 + 6, "ÖÜÁù", 4);
 221   3                  break;
 222   3              default:
 223   3                  break;
 224   3              }
 225   2      
 226   2              strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 227   2              if (hourlyChime)
 228   2                  strncpy(line4 + 12, "¿ª", 2);
 229   2              else
 230   2                  strncpy(line4 + 12, "¹Ø", 2);
 231   2      
 232   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 233   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 234   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 235   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 236   2              break;
 237   2      
 238   2          default:
 239   2              break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 5   

 240   2          }
 241   1      }
 242          
 243          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 244          void Check()
 245          {
 246   1          checkCount++; // °´¼üÊ±¼ä¼ÆÊı£¬Ã¿¹ıÒ»ºÁÃë¼ÓÒ»¡£
 247   1      
 248   1          if (checkCount < 10 / INTERVAL) // 10msÑÓ³ÙÈ¥¶¶¶¯
 249   1              return;
 250   1      
 251   1          if (checkCount > 1010 / INTERVAL) // Èç¹û°´ÏÂÊ±¼ä´óÓÚÒ»Ãë£¬Îª³¤°´¡£
 252   1          {
 253   2              shortOrLang = 2;
 254   2              checkCount = 0;
 255   2              buttonDown = 0;
 256   2          }
 257   1          else // Èç¹û°´ÏÂÊ±¼äĞ¡ÓÚÒ»Ãë£¬ÔòÅĞ¶ÏÊÇ·ñËÉ¿ª£¬ÈôËÉ¿ª£¬ÔòÎª¶Ì°´£¬·ñÔò¼ÌĞø¼ÆÊı¡£
 258   1          {
 259   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 260   2              {
 261   3                  shortOrLang = 1;
 262   3                  checkCount = 0;
 263   3                  buttonDown = 0;
 264   3              }
 265   2          }
 266   1      }
 267          
 268          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 269          void ShortPress()
 270          {
 271   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 272   1          {
 273   2              switch (mode)
 274   2              {
 275   3              case SHOW:
 276   3                  mode = STOPWATCH;
 277   3                  break;
 278   3              case STOPWATCH:
 279   3                  mode = ALARMCLOCK;
 280   3                  break;
 281   3              case ALARMCLOCK:
 282   3                  ChangeMode(SHOW);
 283   3                  break;
 284   3              case SET_HOUR:
 285   3                  mode = SET_MINUTE;
 286   3                  break;
 287   3              case SET_MINUTE:
 288   3                  mode = SET_SECOND;
 289   3                  break;
 290   3              case SET_SECOND:
 291   3                  mode = SET_HOUR;
 292   3                  break;
 293   3              case SET_YEAR:
 294   3                  mode = SET_MONTH;
 295   3                  break;
 296   3              case SET_MONTH:
 297   3                  mode = SET_DAY;
 298   3                  break;
 299   3              case SET_DAY:
 300   3                  mode = SET_YEAR;
 301   3                  break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 6   

 302   3              case ALARMCLOCK_HOUR:
 303   3                  mode = ALARMCLOCK_MINUTE;
 304   3                  break;
 305   3              case ALARMCLOCK_MINUTE:
 306   3                  mode = ALARMCLOCK_SUNDAY;
 307   3                  break;
 308   3              case ALARMCLOCK_SUNDAY:
 309   3                  mode = ALARMCLOCK_MONDAY;
 310   3                  break;
 311   3              case ALARMCLOCK_MONDAY:
 312   3                  mode = ALARMCLOCK_TUESDAY;
 313   3                  break;
 314   3              case ALARMCLOCK_TUESDAY:
 315   3                  mode = ALARMCLOCK_WEDNESDAY;
 316   3                  break;
 317   3              case ALARMCLOCK_WEDNESDAY:
 318   3                  mode = ALARMCLOCK_THURSDAY;
 319   3                  break;
 320   3              case ALARMCLOCK_THURSDAY:
 321   3                  mode = ALARMCLOCK_FRIDAY;
 322   3                  break;
 323   3              case ALARMCLOCK_FRIDAY:
 324   3                  mode = ALARMCLOCK_SATURDAY;
 325   3                  break;
 326   3              case ALARMCLOCK_SATURDAY:
 327   3                  mode = ALARMCLOCK_HOUR;
 328   3                  break;
 329   3              default:
 330   3                  break;
 331   3              }
 332   2          }
 333   1          else
 334   1          {
 335   2              unsigned char setHour;
 336   2              unsigned char setMinute;
 337   2              unsigned char setSecond;
 338   2              switch (mode)
 339   2              {
 340   3              case SET_YEAR:
 341   3                  year++;
 342   3                  year %= 10000;
 343   3      
 344   3                  UpdateWeekday();
 345   3                  break;
 346   3              case SET_MONTH:
 347   3                  month = (month % 12) + 1;
 348   3      
 349   3                  UpdateWeekday();
 350   3                  break;
 351   3              case SET_DAY:
 352   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // ÈòÄê2ÔÂ
 353   3                      day = (day % 29) + 1;
 354   3                  else
 355   3                      day = (day % Seg_Date[month - 1]) + 1;
 356   3      
 357   3                  UpdateWeekday();
 358   3                  break;
 359   3              case SET_HOUR:
 360   3                  setHour++;
 361   3                  setHour %= 24;
 362   3      
 363   3                  break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 7   

 364   3              case SET_MINUTE:
 365   3                  setMinute++;
 366   3                  setMinute %= 60;
 367   3      
 368   3                  break;
 369   3              case SET_SECOND:
 370   3                  setSecond++;
 371   3                  setSecond %= 60;
 372   3      
 373   3                  break;
 374   3              case STOPWATCH:
 375   3                  mode = STOPWATCH_START;
 376   3                  break;
 377   3              case STOPWATCH_START:
 378   3                  mode = STOPWATCH_PAUSE;
 379   3                  break;
 380   3              case STOPWATCH_PAUSE:
 381   3                  mode = STOPWATCH_START;
 382   3                  break;
 383   3              case ALARMCLOCK:
 384   3                  alarm = !alarm;
 385   3                  break;
 386   3              case ALARMCLOCK_HOUR:
 387   3                  setAlarmHour++;
 388   3                  setAlarmHour %= 24;
 389   3      
 390   3                  break;
 391   3              case ALARMCLOCK_MINUTE:
 392   3                  setAlarmMinute++;
 393   3                  setAlarmMinute %= 60;
 394   3      
 395   3                  break;
 396   3              case ALARMCLOCK_SUNDAY:
 397   3      
 398   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 0); // µÍ0Î»È¡·´
 399   3      
 400   3                  break;
 401   3              case ALARMCLOCK_MONDAY:
 402   3      
 403   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 1); // µÍ1Î»È¡·´
 404   3      
 405   3                  break;
 406   3              case ALARMCLOCK_TUESDAY:
 407   3      
 408   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 2); // µÍ2Î»È¡·´
 409   3      
 410   3                  break;
 411   3              case ALARMCLOCK_WEDNESDAY:;
 412   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 3); // µÍ3Î»È¡·´
 413   3      
 414   3                  break;
 415   3              case ALARMCLOCK_THURSDAY:
 416   3      
 417   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 4); // µÍ4Î»È¡·´
 418   3      
 419   3                  break;
 420   3              case ALARMCLOCK_FRIDAY:
 421   3      
 422   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 5); // µÍ5Î»È¡·´
 423   3      
 424   3                  break;
 425   3              case ALARMCLOCK_SATURDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 8   

 426   3      
 427   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 6); // µÍ6Î»È¡·´
 428   3      
 429   3                  break;
 430   3              default:
 431   3                  break;
 432   3              }
 433   2          }
 434   1      
 435   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 436   1      }
 437          
 438          // °´¼ü³¤°´´¦Àí³ÌĞò
 439          void LongPress()
 440          {
 441   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 442   1          {
 443   2              switch (mode)
 444   2              {
 445   3              case SHOW:
 446   3                  mode = SET_HOUR;
 447   3                  break;
 448   3              case SET_YEAR:
 449   3              case SET_MONTH:
 450   3              case SET_DAY:
 451   3                  if (!CheckDate(year, month, day)) // Èç¹ûÈÕÆÚÎŞÎó²ÅÄÜÈ·¶¨
 452   3                  {
 453   4                      ChangeMode(SHOW);
 454   4                  }
 455   3                  break;
 456   3              case SET_HOUR:
 457   3              case SET_MINUTE:
 458   3              case SET_SECOND:
 459   3      
 460   3                  ChangeMode(SHOW);
 461   3                  break;
 462   3              case ALARMCLOCK:
 463   3                  mode = ALARMCLOCK_HOUR;
 464   3                  break;
 465   3              case ALARMCLOCK_HOUR:
 466   3              case ALARMCLOCK_MINUTE:
 467   3              case ALARMCLOCK_SUNDAY:
 468   3              case ALARMCLOCK_MONDAY:
 469   3              case ALARMCLOCK_TUESDAY:
 470   3              case ALARMCLOCK_WEDNESDAY:
 471   3              case ALARMCLOCK_THURSDAY:
 472   3              case ALARMCLOCK_FRIDAY:
 473   3              case ALARMCLOCK_SATURDAY:
 474   3                  alarmHour = setAlarmHour;
 475   3                  alarmMinute = setAlarmMinute;
 476   3                  alarmWeekday = setAlarmWeekday;
 477   3                  mode = ALARMCLOCK;
 478   3                  break;
 479   3              default:
 480   3                  break;
 481   3              }
 482   2          }
 483   1          else
 484   1          {
 485   2              switch (mode)
 486   2              {
 487   3              case SHOW:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 9   

 488   3                  hourlyChime = !hourlyChime;
 489   3                  strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 490   3                  if (hourlyChime)
 491   3                      strncpy(line4 + 12, "¿ª", 2);
 492   3                  else
 493   3                      strncpy(line4 + 12, "¹Ø", 2);
 494   3                  LCD12864_DisplayOneLine(LINE4, line4, 16);
 495   3                  break;
 496   3              case SET_HOUR:
 497   3              case SET_MINUTE:
 498   3              case SET_SECOND:
 499   3                  ChangeMode(SHOW);
 500   3                  break;
 501   3              case SET_YEAR:
 502   3                  year--;
 503   3                  year %= 10000;
 504   3      
 505   3                  UpdateWeekday();
 506   3                  break;
 507   3              case SET_MONTH:
 508   3                  month += 10;
 509   3                  month = (month % 12) + 1;
 510   3      
 511   3                  UpdateWeekday();
 512   3                  break;
 513   3              case SET_DAY:
 514   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 515   3                  {
 516   4                      day += 29 - 2;
 517   4                      day = (day % 29) + 1;
 518   4                  }
 519   3                  else
 520   3                  {
 521   4                      day += Seg_Date[month - 1] - 2;
 522   4                      day = (day % Seg_Date[month - 1]) + 1;
 523   4                  }
 524   3      
 525   3                  UpdateWeekday();
 526   3                  break;
 527   3              case STOPWATCH_PAUSE:
 528   3                  mode = STOPWATCH;
 529   3                  break;
 530   3              case ALARMCLOCK_HOUR:
 531   3              case ALARMCLOCK_MINUTE:
 532   3              case ALARMCLOCK_SUNDAY:
 533   3              case ALARMCLOCK_MONDAY:
 534   3              case ALARMCLOCK_TUESDAY:
 535   3              case ALARMCLOCK_WEDNESDAY:
 536   3              case ALARMCLOCK_THURSDAY:
 537   3              case ALARMCLOCK_FRIDAY:
 538   3              case ALARMCLOCK_SATURDAY:
 539   3                  setAlarmHour = alarmHour;
 540   3                  setAlarmMinute = alarmMinute;
 541   3                  setAlarmWeekday = alarmWeekday;
 542   3                  mode = ALARMCLOCK;
 543   3                  break;
 544   3              default:
 545   3                  break;
 546   3              }
 547   2          }
 548   1      
 549   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 10  

 550   1      }
 551          
 552          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 553          void SecondIncrease()
 554          {
 555   1          second++;
 556   1          if (second > 59)
 557   1          {
 558   2              second = 0;
 559   2              minute++;
 560   2          }
 561   1      
 562   1          if (minute > 59)
 563   1          {
 564   2              minute = 0;
 565   2              hour++;
 566   2          }
 567   1      
 568   1          if (hour > 23)
 569   1          {
 570   2              hour = 0;
 571   2          }
 572   1      }
 573          
 574          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 575          void DateIncrease()
 576          {
 577   1          day++;
 578   1          if (CheckDate(year, month, day))
 579   1          {
 580   2              day = 1;
 581   2              month++;
 582   2              if (month > 12)
 583   2              {
 584   3                  month = 1;
 585   3                  year++;
 586   3              }
 587   2          }
 588   1      }
 589          
 590          // ¸üĞÂÈÕÆÚ
 591          void UpdateWeekday()
 592          {
 593   1          weekday = ((month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) -
             - 1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1) % 7;
 594   1      }
 595          
 596          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 597          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 598          {
 599   1          if (month > 12 || month < 1)
 600   1              return 1; // ÔÂ·İÓĞÎó
 601   1      
 602   1          if (day < 1)
 603   1              return 1; // ÈÕÆÚÓĞÎó
 604   1      
 605   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 606   1          {
 607   2              if (day > 29)
 608   2                  return 1; // ÈòÄê2ÔÂ29ÈÕÓĞÎó
 609   2          }
 610   1          else
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 11  

 611   1          {
 612   2              if (day > Seg_Date[month - 1])
 613   2                  return 1;
 614   2          }
 615   1      
 616   1          return 0;
 617   1      }
 618          
 619          void ClearChar(unsigned char *str)
 620          {
 621   1          unsigned char len = strlen(str);
 622   1          unsigned char i = 0;
 623   1          for (i = 0; i < len; i++)
 624   1          {
 625   2              str[i] = ' ';
 626   2          }
 627   1      }
 628          
 629          void Int0() interrupt 0
 630          {
 631   1          if (buttonDown == 0)
 632   1          {
 633   2              buttonDown = 1;
 634   2              button = 0;
 635   2          }
 636   1      }
 637          
 638          void Int1() interrupt 2
 639          {
 640   1          if (buttonDown == 0)
 641   1          {
 642   2              buttonDown = 1;
 643   2              button = 1;
 644   2          }
 645   1      }
 646          
 647          // ¶¨Ê±Æ÷0ÖĞ¶Ï·şÎñº¯Êı
 648          void Timer0() interrupt 1
 649          {
 650   1          interruptCount++;
 651   1      
 652   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 653   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 654   1      
 655   1          if (interruptCount == (1000 / INTERVAL))
 656   1          { // 1Ãë
 657   2              interruptCount = 0;
 658   2              SecondIncrease();
 659   2              if (mode == SHOW)
 660   2              {
 661   3                  ClearChar(line1);
 662   3      
 663   3                  line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 664   3                  line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 665   3                  line1[6] = ':';
 666   3                  line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 667   3                  line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 668   3                  line1[9] = ':';
 669   3                  line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 670   3                  line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 671   3      
 672   3                  LCD12864_DisplayOneLine(LINE1, line1, 16);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 12  

 673   3              }
 674   2              if (hour == 0 && minute == 0 && second == 0)
 675   2              {
 676   3                  DateIncrease();
 677   3                  UpdateWeekday();
 678   3                  if (mode == SHOW)
 679   3                  {
 680   4                      ClearChar(line2);
 681   4                      ClearChar(line3);
 682   4      
 683   4                      line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 684   4                      line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 685   4                      line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 686   4                      line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 687   4                      line2[7] = '-';
 688   4                      line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 689   4                      line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 690   4                      line2[10] = '-';
 691   4                      line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 692   4                      line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 693   4      
 694   4                      switch (weekday)
 695   4                      {
 696   5                      case 0:
 697   5                          strncpy(line3 + 6, "ÖÜÈÕ", 4);
 698   5                          break;
 699   5                      case 1:
 700   5                          strncpy(line3 + 6, "ÖÜÒ»", 4);
 701   5                          break;
 702   5                      case 2:
 703   5                          strncpy(line3 + 6, "ÖÜ¶ş", 4);
 704   5                          break;
 705   5                      case 3:
 706   5                          strncpy(line3 + 6, "ÖÜÈı", 4);
 707   5                          break;
 708   5                      case 4:
 709   5                          strncpy(line3 + 6, "ÖÜËÄ", 4);
 710   5                          break;
 711   5                      case 5:
 712   5                          strncpy(line3 + 6, "ÖÜÎå", 4);
 713   5                          break;
 714   5                      case 6:
 715   5                          strncpy(line3 + 6, "ÖÜÁù", 4);
 716   5                          break;
 717   5                      default:
 718   5                          break;
 719   5                      }
 720   4      
 721   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 722   4                      LCD12864_DisplayOneLine(LINE3, line3, 16);
 723   4                  }
 724   3              }
 725   2          }
 726   1      
 727   1          if (buttonDown == 1)
 728   1          {
 729   2              Check();
 730   2          }
 731   1      
 732   1          if (shortOrLang == 1)
 733   1          {
 734   2              ShortPress();
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 13  

 735   2          }
 736   1          else if (shortOrLang == 2)
 737   1          {
 738   2              LongPress();
 739   2          }
 740   1      
 741   1          if (mode == SHOW && alarm == 1)
 742   1          {
 743   2              if (hour == alarmHour && minute == alarmMinute && second == 00 && (alarmWeekday & (1 << weekday)) 
             -> 0 && interruptCount == 0)
 744   2                  alarmClockTimes = 2 * ALARMCLOCKTIMES;
 745   2              if (alarmClockTimes != 0)
 746   2              {
 747   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 748   3                      Chime = !Chime;
 749   3                  else
 750   3                      Chime = 0;
 751   3                  if (interruptCount % (250 / INTERVAL) == 0)
 752   3                  {
 753   4                      alarmClockTimes--;
 754   4                      Chime = 0;
 755   4                  }
 756   3              }
 757   2          }
 758   1      
 759   1          if (mode == SHOW && hourlyChime == 1)
 760   1          {
 761   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 762   2                  hourlyChimeTimes = 2 * (HOURLYCHIMETIMES + 1); // ÎÒÒ²²»ÖªµÀÕâÀïÎªÊ²Ã´Òª¼ÓÒ»£¬µ«ÊÂÊµ¾ÍÊÇËü»áÏì
             -HOURLYCHIMETIMES-1´Î£¬ËùÒÔÒª¼ÓÒ»²¹ÉÏ¡£
 763   2              if (hourlyChimeTimes != 0)
 764   2              {
 765   3                  if (interruptCount > (500 / INTERVAL))
 766   3                      Chime = !Chime;
 767   3                  else
 768   3                      Chime = 0;
 769   3                  if (interruptCount % (500 / INTERVAL) == 0)
 770   3                  {
 771   4                      hourlyChimeTimes--;
 772   4                      Chime = 0;
 773   4                  }
 774   3              }
 775   2          }
 776   1      
 777   1          switch (mode)
 778   1          {
 779   2          case SET_HOUR:
 780   2      
 781   2              break;
 782   2          case SET_MINUTE:
 783   2      
 784   2              break;
 785   2          case SET_SECOND:
 786   2      
 787   2              break;
 788   2          case SET_YEAR:
 789   2      
 790   2              break;
 791   2          case SET_MONTH:
 792   2      
 793   2              break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 14  

 794   2          case SET_DAY:
 795   2      
 796   2              break;
 797   2          case STOPWATCH:
 798   2              stopwatchMSecond = 0;
 799   2              stopwatchSecond = 0;
 800   2              stopwatchMinute = 0;
 801   2      
 802   2              break;
 803   2          case STOPWATCH_START:
 804   2              stopwatchMSecond += INTERVAL;
 805   2              if (stopwatchMSecond > 999)
 806   2              {
 807   3                  stopwatchMSecond = 0;
 808   3                  stopwatchSecond++;
 809   3              }
 810   2              if (stopwatchSecond > 59)
 811   2              {
 812   3                  stopwatchSecond = 0;
 813   3                  stopwatchMinute++;
 814   3              }
 815   2              if (stopwatchMinute > 59)
 816   2              {
 817   3                  stopwatchMinute = 0;
 818   3              }
 819   2      
 820   2              break;
 821   2          case STOPWATCH_PAUSE:
 822   2      
 823   2              break;
 824   2          case ALARMCLOCK:
 825   2      
 826   2              break;
 827   2          case ALARMCLOCK_HOUR:
 828   2      
 829   2              break;
 830   2          case ALARMCLOCK_MINUTE:
 831   2      
 832   2              break;
 833   2          case ALARMCLOCK_SUNDAY:
 834   2      
 835   2              break;
 836   2          case ALARMCLOCK_MONDAY:
 837   2      
 838   2              break;
 839   2          case ALARMCLOCK_TUESDAY:
 840   2      
 841   2              break;
 842   2          case ALARMCLOCK_WEDNESDAY:
 843   2      
 844   2              break;
 845   2          case ALARMCLOCK_THURSDAY:
 846   2      
 847   2              break;
 848   2          case ALARMCLOCK_FRIDAY:
 849   2      
 850   2              break;
 851   2          case ALARMCLOCK_SATURDAY:
 852   2      
 853   2              break;
 854   2          default:
 855   2              break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 14:51:45 PAGE 15  

 856   2          }
 857   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2734    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     90       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
