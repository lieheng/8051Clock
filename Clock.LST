C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          #include "LCD12864.h"
   3          
   4          #include <string.h>
   5          
   6          #define INTERVAL 10 // ¼ä¸ô10ºÁÃë
   7          
   8          #define INIT_HOUR 23   // ³õÊ¼»¯Ğ¡Ê±
   9          #define INIT_MINUTE 59 // ³õÊ¼»¯·ÖÖÓ
  10          #define INIT_SECOND 58 // ³õÊ¼»¯Ãë
  11          
  12          #define INIT_YEAR 2020 // ³õÊ¼»¯Äê
  13          #define INIT_MONTH 2   // ³õÊ¼»¯ÔÂ
  14          #define INIT_DAY 28    // ³õÊ¼»¯ÈÕ
  15          
  16          #define INIT_ALARM 0         // ³õÊ¼»¯ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  17          #define INIT_ALARM_HOUR 23   // ³õÊ¼»¯ÄÖÖÓĞ¡Ê±
  18          #define INIT_ALARM_MINUTE 59 // ³õÊ¼»¯ÄÖÖÓ·ÖÖÓ
  19          #define INIT_ALARM_WEEKDAY 0 // ³õÊ¼»¯ÄÖÖÓĞÇÆÚ
  20          #define ALARMCLOCKTIMES 6    // ÄÖÖÓÏìÁå´ÎÊı
  21          
  22          #define INIT_HOURLY_CHIME 0 // ³õÊ¼»¯Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  23          #define HOURLYCHIMETIMES 3  // ÕûµãÏìÁå´ÎÊı
  24          
  25          unsigned char hour = INIT_HOUR;     // ³õÊ¼»¯Ğ¡Ê±
  26          unsigned char minute = INIT_MINUTE; // ³õÊ¼»¯·ÖÖÓ
  27          unsigned char second = INIT_SECOND; // ³õÊ¼»¯Ãë
  28          
  29          unsigned int year = INIT_YEAR;    // ³õÊ¼»¯Äê
  30          unsigned char month = INIT_MONTH; // ³õÊ¼»¯ÔÂ
  31          unsigned char day = INIT_DAY;     // ³õÊ¼»¯ÈÕ
  32          
  33          unsigned char weekday = 0; // ĞÇÆÚ£¬ĞÇÆÚ³õÊ¼»¯ÈÎÎñÓÉinit()º¯Êı¸ºÔğ
  34          
  35          unsigned char alarmHour = INIT_ALARM_HOUR;       // ÄÖÖÓÊ±
  36          unsigned char alarmMinute = INIT_ALARM_MINUTE;   // ÄÖÖÓ·Ö
  37          unsigned char alarmWeekday = INIT_ALARM_WEEKDAY; // ÄÖÖÓĞÇÆÚ¹¦ÄÜ£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ¾ÖÜÒ»Ïì£¬
             -ÒÔ´ËÀàÍÆ
  38          
  39          bit alarm = INIT_ALARM; // ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  40          
  41          bit hourlyChime = INIT_HOURLY_CHIME; // Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  42          
  43          bit buttonDown = 0;            // ÓÃÓÚÅĞ¶ÏÊÇ·ñÓĞ°´¼ü°´ÏÂ£¬1ÎªÓĞ£¬0ÎªÎŞ
  44          bit button = 0;                // ÓÃÓÚÅĞ¶Ï°´ÏÂµÄÊÇÄÄ¸ö°´¼ü
  45          unsigned int checkCount = 0;   // ÓÃÓÚ¼ì²é°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´£¬Ã¿°´Ò»ºÁÃë¸Ã±äÁ¿¼ÓÒ»
  46          unsigned char shortOrLang = 0; // ÓÃÓÚ±íÊ¾°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´µÄ±êÖ¾£¬0±íÊ¾ÎŞĞ§£¬1±íÊ¾¶Ì°´£¬2±íÊ¾³¤°´
  47          
  48          unsigned char line1[16] = "                ";
  49          unsigned char line2[16] = "                ";
  50          unsigned char line3[16] = "                ";
  51          unsigned char line4[16] = "                ";
  52          
  53          unsigned char hourlyChimeTimes = 0; // ¼ÇÂ¼Õûµã±¨Ê±µÄÏìÁå´ÎÊı
  54          unsigned char alarmClockTimes = 0;  // ¼ÇÂ¼ÄÖÖÓµÄÏìÁå´ÎÊı
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 2   

  55          
  56          unsigned int stopwatchMSecond = 0; // Ãë±íµÄºÁÃëÊı
  57          unsigned char stopwatchSecond = 0; // Ãë±íµÄÃëÊı
  58          unsigned char stopwatchMinute = 0; // Ãë±íµÄ·ÖÖÓÊı
  59          
  60          unsigned char setAlarmHour = INIT_ALARM_HOUR;       // ÉèÖÃÄÖÖÓÊ±µÄ±äÁ¿
  61          unsigned char setAlarmMinute = INIT_ALARM_MINUTE;   // ÉèÖÃÄÖÖÓ·ÖµÄ±äÁ¿
  62          unsigned char setAlarmWeekday = INIT_ALARM_WEEKDAY; // ÉèÖÃÄÖÖÓĞÇÆÚµÄ±äÁ¿£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ
             -¾ÖÜÒ»Ïì£¬ÒÔ´ËÀàÍÆ
  63          
  64          enum MODE
  65          {
  66              SHOW,                 // ÏÔÊ¾Ä£Ê½
  67              SET_YEAR,             // ÉèÖÃÄêÄ£Ê½
  68              SET_MONTH,            // ÉèÖÃÔÂÄ£Ê½
  69              SET_DAY,              // ÉèÖÃÈÕÄ£Ê½
  70              SET_HOUR,             // ÉèÖÃÊ±Ä£Ê½
  71              SET_MINUTE,           // ÉèÖÃ·ÖÄ£Ê½
  72              SET_SECOND,           // ÉèÖÃÃëÄ£Ê½
  73              STOPWATCH,            // Ãë±íÄ£Ê½
  74              STOPWATCH_START,      // Ãë±í¼ÆÊ±Ä£Ê½
  75              STOPWATCH_PAUSE,      // Ãë±íÔİÍ£Ä£Ê½
  76              ALARMCLOCK,           // ÄÖÖÓÄ£Ê½
  77              ALARMCLOCK_HOUR,      // ÉèÖÃÄÖÖÓÊ±Ä£Ê½
  78              ALARMCLOCK_MINUTE,    // ÉèÖÃÄÖÖÓ·ÖÄ£Ê½
  79              ALARMCLOCK_SUNDAY,    // ÉèÖÃÄÖÖÓÖÜÈÕÄ£Ê½
  80              ALARMCLOCK_MONDAY,    // ÉèÖÃÄÖÖÓÖÜÒ»Ä£Ê½
  81              ALARMCLOCK_TUESDAY,   // ÉèÖÃÄÖÖÓÖÜ¶şÄ£Ê½
  82              ALARMCLOCK_WEDNESDAY, // ÉèÖÃÄÖÖÓÖÜÈıÄ£Ê½
  83              ALARMCLOCK_THURSDAY,  // ÉèÖÃÄÖÖÓÖÜËÄÄ£Ê½
  84              ALARMCLOCK_FRIDAY,    // ÉèÖÃÄÖÖÓÖÜÎåÄ£Ê½
  85              ALARMCLOCK_SATURDAY   // ÉèÖÃÄÖÖÓÖÜÁùÄ£Ê½
  86          };
  87          
  88          unsigned char mode = SHOW; // Ä£Ê½
  89          
  90          unsigned int interruptCount = 0; // ÖĞ¶Ï´ÎÊı
  91          
  92          sbit Chime = P2 ^ 2; // ·äÃùÆ÷
  93          
  94          sbit P3_2 = P3 ^ 2; // Íâ²¿ÖĞ¶Ï0µÄ¿ØÖÆÒı½Å
  95          sbit P3_3 = P3 ^ 3; // Íâ²¿ÖĞ¶Ï1µÄ¿ØÖÆÒı½Å
  96          
  97          unsigned char code Seg_Date[] = {
  98              31, // 1ÔÂ
  99              28, // 2ÔÂ
 100              31, // 3ÔÂ
 101              30, // 4ÔÂ
 102              31, // 5ÔÂ
 103              30, // 6ÔÂ
 104              31, // 7ÔÂ
 105              31, // 8ÔÂ
 106              30, // 9ÔÂ
 107              31, // 10ÔÂ
 108              30, // 11ÔÂ
 109              31  // 12ÔÂ
 110          };
 111          
 112          // ³õÊ¼»¯º¯Êı
 113          void Init();
 114          // ÇĞ»»Ä£Ê½
 115          void ChangeMode(MODE);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 3   

 116          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 117          void Check();
 118          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 119          void ShortPress();
 120          // °´¼ü³¤°´´¦Àí³ÌĞò
 121          void LongPress();
 122          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 123          void SecondIncrease();
 124          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 125          void DateIncrease();
 126          // ¸üĞÂÈÕÆÚ
 127          void UpdateWeekday();
 128          // Çå¿Õ×Ö·û´®
 129          void ClearChar(unsigned char *str);
 130          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 131          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 132          
 133          void main()
 134          {
 135   1          Init();
 136   1          while (1)
 137   1          {
 138   2              ;
 139   2          }
 140   1      }
 141          
 142          // ³õÊ¼»¯º¯Êı
 143          void Init()
 144          {
 145   1      
 146   1          UpdateWeekday(); // ³õÊ¼»¯ĞÇÆÚ
 147   1      
 148   1          LCD12864_Init(); // ³õÊ¼»¯Òº¾§ÆÁ
 149   1      
 150   1          ChangeMode(SHOW);
 151   1      
 152   1          Chime = 0; // ³õÊ¼»¯·äÃùÆ÷Òı½ÅÎª0£¬·ÀÖ¹Ëğ»µ·äÃùÆ÷
 153   1      
 154   1          EA = 1;      // ¿ªÆô×ÜÖĞ¶Ï
 155   1          IT0 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï0Îª±ßÑØ´¥·¢·½Ê½
 156   1          EX0 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï0
 157   1          IT1 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï1Îª±ßÑØ´¥·¢·½Ê½
 158   1          EX1 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï1
 159   1          PT0 = 1;     // ¼ÆÊ±Æ÷0ÖĞ¶ÏÓÅÏÈ¼¶Îª×î¸ß
 160   1          TMOD = 0x01; // ÉèÖÃ¼ÆÊ±Æ÷0¹¤×÷ÔÚ·½Ê½1
 161   1          ET0 = 1;     // ÔÊĞí¼ÆÊ±Æ÷0ÖĞ¶Ï
 162   1          TR0 = 1;     // Æô¶¯¼ÆÊ±Æ÷
 163   1      
 164   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 165   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 166   1      }
 167          
 168          void ChangeMode(MODE)
 169          {
 170   1          mode = MODE;
 171   1          switch (mode)
 172   1          {
 173   2          case SHOW:
 174   2              ClearChar(line1);
 175   2              ClearChar(line2);
 176   2              ClearChar(line3);
 177   2              ClearChar(line4);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 4   

 178   2      
 179   2              line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 180   2              line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 181   2              line1[6] = ':';
 182   2              line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 183   2              line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 184   2              line1[9] = ':';
 185   2              line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 186   2              line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 187   2      
 188   2              line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 189   2              line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 190   2              line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 191   2              line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 192   2              line2[7] = '-';
 193   2              line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 194   2              line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 195   2              line2[10] = '-';
 196   2              line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 197   2              line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 198   2      
 199   2              switch (weekday)
 200   2              {
 201   3              case 0:
 202   3                  strncpy(line3 + 6, "ÖÜÈÕ", 4);
 203   3                  break;
 204   3              case 1:
 205   3                  strncpy(line3 + 6, "ÖÜÒ»", 4);
 206   3                  break;
 207   3              case 2:
 208   3                  strncpy(line3 + 6, "ÖÜ¶ş", 4);
 209   3                  break;
 210   3              case 3:
 211   3                  strncpy(line3 + 6, "ÖÜÈı", 4);
 212   3                  break;
 213   3              case 4:
 214   3                  strncpy(line3 + 6, "ÖÜËÄ", 4);
 215   3                  break;
 216   3              case 5:
 217   3                  strncpy(line3 + 6, "ÖÜÎå", 4);
 218   3                  break;
 219   3              case 6:
 220   3                  strncpy(line3 + 6, "ÖÜÁù", 4);
 221   3                  break;
 222   3              default:
 223   3                  break;
 224   3              }
 225   2      
 226   2              strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 227   2              if (hourlyChime)
 228   2                  strncpy(line4 + 12, "¿ª", 2);
 229   2              else
 230   2                  strncpy(line4 + 12, "¹Ø", 2);
 231   2      
 232   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 233   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 234   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 235   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 236   2              break;
 237   2          case STOPWATCH:
 238   2              ClearChar(line1);
 239   2              ClearChar(line2);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 5   

 240   2              ClearChar(line3);
 241   2              ClearChar(line4);
 242   2      
 243   2              stopwatchMinute = 0;
 244   2              stopwatchSecond = 0;
 245   2              stopwatchMSecond = 0;
 246   2      
 247   2              line1[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 248   2              line1[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 249   2              line1[6] = ':';
 250   2              line1[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 251   2              line1[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 252   2              line1[9] = ':';
 253   2              line1[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 254   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 255   2      
 256   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 257   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 258   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 259   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 260   2          default:
 261   2              break;
 262   2          }
 263   1      }
 264          
 265          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 266          void Check()
 267          {
 268   1          checkCount++; // °´¼üÊ±¼ä¼ÆÊı£¬Ã¿¹ıÒ»ºÁÃë¼ÓÒ»¡£
 269   1      
 270   1          if (checkCount < 10 / INTERVAL) // 10msÑÓ³ÙÈ¥¶¶¶¯
 271   1              return;
 272   1      
 273   1          if (checkCount > 1010 / INTERVAL) // Èç¹û°´ÏÂÊ±¼ä´óÓÚÒ»Ãë£¬Îª³¤°´¡£
 274   1          {
 275   2              shortOrLang = 2;
 276   2              checkCount = 0;
 277   2              buttonDown = 0;
 278   2          }
 279   1          else // Èç¹û°´ÏÂÊ±¼äĞ¡ÓÚÒ»Ãë£¬ÔòÅĞ¶ÏÊÇ·ñËÉ¿ª£¬ÈôËÉ¿ª£¬ÔòÎª¶Ì°´£¬·ñÔò¼ÌĞø¼ÆÊı¡£
 280   1          {
 281   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 282   2              {
 283   3                  shortOrLang = 1;
 284   3                  checkCount = 0;
 285   3                  buttonDown = 0;
 286   3              }
 287   2          }
 288   1      }
 289          
 290          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 291          void ShortPress()
 292          {
 293   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 294   1          {
 295   2              switch (mode)
 296   2              {
 297   3              case SHOW:
 298   3                  ChangeMode(STOPWATCH);
 299   3                  break;
 300   3              case STOPWATCH:
 301   3                  mode = ALARMCLOCK;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 6   

 302   3                  break;
 303   3              case ALARMCLOCK:
 304   3                  ChangeMode(SHOW);
 305   3                  break;
 306   3              case SET_HOUR:
 307   3                  mode = SET_MINUTE;
 308   3                  break;
 309   3              case SET_MINUTE:
 310   3                  mode = SET_SECOND;
 311   3                  break;
 312   3              case SET_SECOND:
 313   3                  mode = SET_HOUR;
 314   3                  break;
 315   3              case SET_YEAR:
 316   3                  mode = SET_MONTH;
 317   3                  break;
 318   3              case SET_MONTH:
 319   3                  mode = SET_DAY;
 320   3                  break;
 321   3              case SET_DAY:
 322   3                  mode = SET_YEAR;
 323   3                  break;
 324   3              case ALARMCLOCK_HOUR:
 325   3                  mode = ALARMCLOCK_MINUTE;
 326   3                  break;
 327   3              case ALARMCLOCK_MINUTE:
 328   3                  mode = ALARMCLOCK_SUNDAY;
 329   3                  break;
 330   3              case ALARMCLOCK_SUNDAY:
 331   3                  mode = ALARMCLOCK_MONDAY;
 332   3                  break;
 333   3              case ALARMCLOCK_MONDAY:
 334   3                  mode = ALARMCLOCK_TUESDAY;
 335   3                  break;
 336   3              case ALARMCLOCK_TUESDAY:
 337   3                  mode = ALARMCLOCK_WEDNESDAY;
 338   3                  break;
 339   3              case ALARMCLOCK_WEDNESDAY:
 340   3                  mode = ALARMCLOCK_THURSDAY;
 341   3                  break;
 342   3              case ALARMCLOCK_THURSDAY:
 343   3                  mode = ALARMCLOCK_FRIDAY;
 344   3                  break;
 345   3              case ALARMCLOCK_FRIDAY:
 346   3                  mode = ALARMCLOCK_SATURDAY;
 347   3                  break;
 348   3              case ALARMCLOCK_SATURDAY:
 349   3                  mode = ALARMCLOCK_HOUR;
 350   3                  break;
 351   3              default:
 352   3                  break;
 353   3              }
 354   2          }
 355   1          else
 356   1          {
 357   2              unsigned char setHour;
 358   2              unsigned char setMinute;
 359   2              unsigned char setSecond;
 360   2              switch (mode)
 361   2              {
 362   3              case SET_YEAR:
 363   3                  year++;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 7   

 364   3                  year %= 10000;
 365   3      
 366   3                  UpdateWeekday();
 367   3                  break;
 368   3              case SET_MONTH:
 369   3                  month = (month % 12) + 1;
 370   3      
 371   3                  UpdateWeekday();
 372   3                  break;
 373   3              case SET_DAY:
 374   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // ÈòÄê2ÔÂ
 375   3                      day = (day % 29) + 1;
 376   3                  else
 377   3                      day = (day % Seg_Date[month - 1]) + 1;
 378   3      
 379   3                  UpdateWeekday();
 380   3                  break;
 381   3              case SET_HOUR:
 382   3                  setHour++;
 383   3                  setHour %= 24;
 384   3      
 385   3                  break;
 386   3              case SET_MINUTE:
 387   3                  setMinute++;
 388   3                  setMinute %= 60;
 389   3      
 390   3                  break;
 391   3              case SET_SECOND:
 392   3                  setSecond++;
 393   3                  setSecond %= 60;
 394   3      
 395   3                  break;
 396   3              case STOPWATCH:
 397   3                  mode = STOPWATCH_START;
 398   3                  break;
 399   3              case STOPWATCH_START:
 400   3                  mode = STOPWATCH_PAUSE;
 401   3                  break;
 402   3              case STOPWATCH_PAUSE:
 403   3                  mode = STOPWATCH_START;
 404   3                  break;
 405   3              case ALARMCLOCK:
 406   3                  alarm = !alarm;
 407   3                  break;
 408   3              case ALARMCLOCK_HOUR:
 409   3                  setAlarmHour++;
 410   3                  setAlarmHour %= 24;
 411   3      
 412   3                  break;
 413   3              case ALARMCLOCK_MINUTE:
 414   3                  setAlarmMinute++;
 415   3                  setAlarmMinute %= 60;
 416   3      
 417   3                  break;
 418   3              case ALARMCLOCK_SUNDAY:
 419   3      
 420   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 0); // µÍ0Î»È¡·´
 421   3      
 422   3                  break;
 423   3              case ALARMCLOCK_MONDAY:
 424   3      
 425   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 1); // µÍ1Î»È¡·´
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 8   

 426   3      
 427   3                  break;
 428   3              case ALARMCLOCK_TUESDAY:
 429   3      
 430   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 2); // µÍ2Î»È¡·´
 431   3      
 432   3                  break;
 433   3              case ALARMCLOCK_WEDNESDAY:;
 434   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 3); // µÍ3Î»È¡·´
 435   3      
 436   3                  break;
 437   3              case ALARMCLOCK_THURSDAY:
 438   3      
 439   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 4); // µÍ4Î»È¡·´
 440   3      
 441   3                  break;
 442   3              case ALARMCLOCK_FRIDAY:
 443   3      
 444   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 5); // µÍ5Î»È¡·´
 445   3      
 446   3                  break;
 447   3              case ALARMCLOCK_SATURDAY:
 448   3      
 449   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 6); // µÍ6Î»È¡·´
 450   3      
 451   3                  break;
 452   3              default:
 453   3                  break;
 454   3              }
 455   2          }
 456   1      
 457   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 458   1      }
 459          
 460          // °´¼ü³¤°´´¦Àí³ÌĞò
 461          void LongPress()
 462          {
 463   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 464   1          {
 465   2              switch (mode)
 466   2              {
 467   3              case SHOW:
 468   3                  mode = SET_HOUR;
 469   3                  break;
 470   3              case SET_YEAR:
 471   3              case SET_MONTH:
 472   3              case SET_DAY:
 473   3                  if (!CheckDate(year, month, day)) // Èç¹ûÈÕÆÚÎŞÎó²ÅÄÜÈ·¶¨
 474   3                  {
 475   4                      ChangeMode(SHOW);
 476   4                  }
 477   3                  break;
 478   3              case SET_HOUR:
 479   3              case SET_MINUTE:
 480   3              case SET_SECOND:
 481   3      
 482   3                  ChangeMode(SHOW);
 483   3                  break;
 484   3              case ALARMCLOCK:
 485   3                  mode = ALARMCLOCK_HOUR;
 486   3                  break;
 487   3              case ALARMCLOCK_HOUR:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 9   

 488   3              case ALARMCLOCK_MINUTE:
 489   3              case ALARMCLOCK_SUNDAY:
 490   3              case ALARMCLOCK_MONDAY:
 491   3              case ALARMCLOCK_TUESDAY:
 492   3              case ALARMCLOCK_WEDNESDAY:
 493   3              case ALARMCLOCK_THURSDAY:
 494   3              case ALARMCLOCK_FRIDAY:
 495   3              case ALARMCLOCK_SATURDAY:
 496   3                  alarmHour = setAlarmHour;
 497   3                  alarmMinute = setAlarmMinute;
 498   3                  alarmWeekday = setAlarmWeekday;
 499   3                  mode = ALARMCLOCK;
 500   3                  break;
 501   3              default:
 502   3                  break;
 503   3              }
 504   2          }
 505   1          else
 506   1          {
 507   2              switch (mode)
 508   2              {
 509   3              case SHOW:
 510   3                  hourlyChime = !hourlyChime;
 511   3                  strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 512   3                  if (hourlyChime)
 513   3                      strncpy(line4 + 12, "¿ª", 2);
 514   3                  else
 515   3                      strncpy(line4 + 12, "¹Ø", 2);
 516   3                  LCD12864_DisplayOneLine(LINE4, line4, 16);
 517   3                  break;
 518   3              case SET_HOUR:
 519   3              case SET_MINUTE:
 520   3              case SET_SECOND:
 521   3                  ChangeMode(SHOW);
 522   3                  break;
 523   3              case SET_YEAR:
 524   3                  year--;
 525   3                  year %= 10000;
 526   3      
 527   3                  UpdateWeekday();
 528   3                  break;
 529   3              case SET_MONTH:
 530   3                  month += 10;
 531   3                  month = (month % 12) + 1;
 532   3      
 533   3                  UpdateWeekday();
 534   3                  break;
 535   3              case SET_DAY:
 536   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 537   3                  {
 538   4                      day += 29 - 2;
 539   4                      day = (day % 29) + 1;
 540   4                  }
 541   3                  else
 542   3                  {
 543   4                      day += Seg_Date[month - 1] - 2;
 544   4                      day = (day % Seg_Date[month - 1]) + 1;
 545   4                  }
 546   3      
 547   3                  UpdateWeekday();
 548   3                  break;
 549   3              case STOPWATCH_PAUSE:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 10  

 550   3                  ChangeMode(STOPWATCH);
 551   3                  break;
 552   3              case ALARMCLOCK_HOUR:
 553   3              case ALARMCLOCK_MINUTE:
 554   3              case ALARMCLOCK_SUNDAY:
 555   3              case ALARMCLOCK_MONDAY:
 556   3              case ALARMCLOCK_TUESDAY:
 557   3              case ALARMCLOCK_WEDNESDAY:
 558   3              case ALARMCLOCK_THURSDAY:
 559   3              case ALARMCLOCK_FRIDAY:
 560   3              case ALARMCLOCK_SATURDAY:
 561   3                  setAlarmHour = alarmHour;
 562   3                  setAlarmMinute = alarmMinute;
 563   3                  setAlarmWeekday = alarmWeekday;
 564   3                  mode = ALARMCLOCK;
 565   3                  break;
 566   3              default:
 567   3                  break;
 568   3              }
 569   2          }
 570   1      
 571   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 572   1      }
 573          
 574          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 575          void SecondIncrease()
 576          {
 577   1          second++;
 578   1          if (second > 59)
 579   1          {
 580   2              second = 0;
 581   2              minute++;
 582   2          }
 583   1      
 584   1          if (minute > 59)
 585   1          {
 586   2              minute = 0;
 587   2              hour++;
 588   2          }
 589   1      
 590   1          if (hour > 23)
 591   1          {
 592   2              hour = 0;
 593   2          }
 594   1      }
 595          
 596          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 597          void DateIncrease()
 598          {
 599   1          day++;
 600   1          if (CheckDate(year, month, day))
 601   1          {
 602   2              day = 1;
 603   2              month++;
 604   2              if (month > 12)
 605   2              {
 606   3                  month = 1;
 607   3                  year++;
 608   3              }
 609   2          }
 610   1      }
 611          
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 11  

 612          // ¸üĞÂÈÕÆÚ
 613          void UpdateWeekday()
 614          {
 615   1          weekday = ((month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) -
             - 1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1) % 7;
 616   1      }
 617          
 618          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 619          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 620          {
 621   1          if (month > 12 || month < 1)
 622   1              return 1; // ÔÂ·İÓĞÎó
 623   1      
 624   1          if (day < 1)
 625   1              return 1; // ÈÕÆÚÓĞÎó
 626   1      
 627   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 628   1          {
 629   2              if (day > 29)
 630   2                  return 1; // ÈòÄê2ÔÂ29ÈÕÓĞÎó
 631   2          }
 632   1          else
 633   1          {
 634   2              if (day > Seg_Date[month - 1])
 635   2                  return 1;
 636   2          }
 637   1      
 638   1          return 0;
 639   1      }
 640          
 641          void ClearChar(unsigned char *str)
 642          {
 643   1          unsigned char len = strlen(str);
 644   1          unsigned char i = 0;
 645   1          for (i = 0; i < len; i++)
 646   1          {
 647   2              str[i] = ' ';
 648   2          }
 649   1      }
 650          
 651          void Int0() interrupt 0
 652          {
 653   1          if (buttonDown == 0)
 654   1          {
 655   2              buttonDown = 1;
 656   2              button = 0;
 657   2          }
 658   1      }
 659          
 660          void Int1() interrupt 2
 661          {
 662   1          if (buttonDown == 0)
 663   1          {
 664   2              buttonDown = 1;
 665   2              button = 1;
 666   2          }
 667   1      }
 668          
 669          // ¶¨Ê±Æ÷0ÖĞ¶Ï·şÎñº¯Êı
 670          void Timer0() interrupt 1
 671          {
 672   1          interruptCount++;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 12  

 673   1      
 674   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 675   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 676   1      
 677   1          if (interruptCount == (1000 / INTERVAL))
 678   1          { // 1Ãë
 679   2              interruptCount = 0;
 680   2              SecondIncrease();
 681   2              if (mode == SHOW)
 682   2              {
 683   3                  ClearChar(line1);
 684   3      
 685   3                  line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 686   3                  line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 687   3                  line1[6] = ':';
 688   3                  line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 689   3                  line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 690   3                  line1[9] = ':';
 691   3                  line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 692   3                  line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 693   3      
 694   3                  LCD12864_DisplayOneLine(LINE1, line1, 16);
 695   3              }
 696   2              if (hour == 0 && minute == 0 && second == 0)
 697   2              {
 698   3                  DateIncrease();
 699   3                  UpdateWeekday();
 700   3                  if (mode == SHOW)
 701   3                  {
 702   4                      ClearChar(line2);
 703   4                      ClearChar(line3);
 704   4      
 705   4                      line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 706   4                      line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 707   4                      line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 708   4                      line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 709   4                      line2[7] = '-';
 710   4                      line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 711   4                      line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 712   4                      line2[10] = '-';
 713   4                      line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 714   4                      line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 715   4      
 716   4                      switch (weekday)
 717   4                      {
 718   5                      case 0:
 719   5                          strncpy(line3 + 6, "ÖÜÈÕ", 4);
 720   5                          break;
 721   5                      case 1:
 722   5                          strncpy(line3 + 6, "ÖÜÒ»", 4);
 723   5                          break;
 724   5                      case 2:
 725   5                          strncpy(line3 + 6, "ÖÜ¶ş", 4);
 726   5                          break;
 727   5                      case 3:
 728   5                          strncpy(line3 + 6, "ÖÜÈı", 4);
 729   5                          break;
 730   5                      case 4:
 731   5                          strncpy(line3 + 6, "ÖÜËÄ", 4);
 732   5                          break;
 733   5                      case 5:
 734   5                          strncpy(line3 + 6, "ÖÜÎå", 4);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 13  

 735   5                          break;
 736   5                      case 6:
 737   5                          strncpy(line3 + 6, "ÖÜÁù", 4);
 738   5                          break;
 739   5                      default:
 740   5                          break;
 741   5                      }
 742   4      
 743   4                      LCD12864_DisplayOneLine(LINE2, line2, 16);
 744   4                      LCD12864_DisplayOneLine(LINE3, line3, 16);
 745   4                  }
 746   3              }
 747   2          }
 748   1      
 749   1          if (buttonDown == 1)
 750   1          {
 751   2              Check();
 752   2          }
 753   1      
 754   1          if (shortOrLang == 1)
 755   1          {
 756   2              ShortPress();
 757   2          }
 758   1          else if (shortOrLang == 2)
 759   1          {
 760   2              LongPress();
 761   2          }
 762   1      
 763   1          if (mode == SHOW && alarm == 1)
 764   1          {
 765   2              if (hour == alarmHour && minute == alarmMinute && second == 00 && (alarmWeekday & (1 << weekday)) 
             -> 0 && interruptCount == 0)
 766   2                  alarmClockTimes = 2 * ALARMCLOCKTIMES;
 767   2              if (alarmClockTimes != 0)
 768   2              {
 769   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 770   3                      Chime = !Chime;
 771   3                  else
 772   3                      Chime = 0;
 773   3                  if (interruptCount % (250 / INTERVAL) == 0)
 774   3                  {
 775   4                      alarmClockTimes--;
 776   4                      Chime = 0;
 777   4                  }
 778   3              }
 779   2          }
 780   1      
 781   1          if (mode == SHOW && hourlyChime == 1)
 782   1          {
 783   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 784   2                  hourlyChimeTimes = 2 * (HOURLYCHIMETIMES + 1); // ÎÒÒ²²»ÖªµÀÕâÀïÎªÊ²Ã´Òª¼ÓÒ»£¬µ«ÊÂÊµ¾ÍÊÇËü»áÏì
             -HOURLYCHIMETIMES-1´Î£¬ËùÒÔÒª¼ÓÒ»²¹ÉÏ¡£
 785   2              if (hourlyChimeTimes != 0)
 786   2              {
 787   3                  if (interruptCount > (500 / INTERVAL))
 788   3                      Chime = !Chime;
 789   3                  else
 790   3                      Chime = 0;
 791   3                  if (interruptCount % (500 / INTERVAL) == 0)
 792   3                  {
 793   4                      hourlyChimeTimes--;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 14  

 794   4                      Chime = 0;
 795   4                  }
 796   3              }
 797   2          }
 798   1      
 799   1          switch (mode)
 800   1          {
 801   2          case SET_HOUR:
 802   2      
 803   2              break;
 804   2          case SET_MINUTE:
 805   2      
 806   2              break;
 807   2          case SET_SECOND:
 808   2      
 809   2              break;
 810   2          case SET_YEAR:
 811   2      
 812   2              break;
 813   2          case SET_MONTH:
 814   2      
 815   2              break;
 816   2          case SET_DAY:
 817   2      
 818   2              break;
 819   2          case STOPWATCH_START:
 820   2              stopwatchMSecond += INTERVAL;
 821   2              if (stopwatchMSecond > 999)
 822   2              {
 823   3                  stopwatchMSecond = 0;
 824   3                  stopwatchSecond++;
 825   3              }
 826   2              if (stopwatchSecond > 59)
 827   2              {
 828   3                  stopwatchSecond = 0;
 829   3                  stopwatchMinute++;
 830   3              }
 831   2              if (stopwatchMinute > 59)
 832   2              {
 833   3                  stopwatchMinute = 0;
 834   3              }
 835   2              line1[4] = stopwatchMinute / 10 + '0'; // ·ÖÖÓÊ®Î»
 836   2              line1[5] = stopwatchMinute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 837   2              line1[6] = ':';
 838   2              line1[7] = stopwatchSecond / 10 + '0'; // ÃëÊ®Î»
 839   2              line1[8] = stopwatchSecond % 10 + '0'; // Ãë¸öÎ»
 840   2              line1[9] = ':';
 841   2              line1[10] = stopwatchMSecond / 100 + '0';     // ºÁÃë°ÙÎ»
 842   2              line1[11] = stopwatchMSecond / 10 % 10 + '0'; // ºÁÃëÊ®Î»
 843   2      
 844   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 845   2      
 846   2              break;
 847   2          case STOPWATCH_PAUSE:
 848   2      
 849   2              break;
 850   2          case ALARMCLOCK:
 851   2      
 852   2              break;
 853   2          case ALARMCLOCK_HOUR:
 854   2      
 855   2              break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 16:39:11 PAGE 15  

 856   2          case ALARMCLOCK_MINUTE:
 857   2      
 858   2              break;
 859   2          case ALARMCLOCK_SUNDAY:
 860   2      
 861   2              break;
 862   2          case ALARMCLOCK_MONDAY:
 863   2      
 864   2              break;
 865   2          case ALARMCLOCK_TUESDAY:
 866   2      
 867   2              break;
 868   2          case ALARMCLOCK_WEDNESDAY:
 869   2      
 870   2              break;
 871   2          case ALARMCLOCK_THURSDAY:
 872   2      
 873   2              break;
 874   2          case ALARMCLOCK_FRIDAY:
 875   2      
 876   2              break;
 877   2          case ALARMCLOCK_SATURDAY:
 878   2      
 879   2              break;
 880   2          default:
 881   2              break;
 882   2          }
 883   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2967    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     90       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
