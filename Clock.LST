C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          
   3          #include "LCD12864.h"
   4          #include "AT24C02.h"
   5          #include "DS18B20.h"
   6          
   7          #include <string.h>
   8          
   9          #define INTERVAL 10 // 间隔10毫秒
  10          
  11          #define INIT_HOUR 0    // 初始化时
  12          #define INIT_MINUTE 0  // 初始化分
  13          #define INIT_SECOND 58 // 初始化秒
  14          
  15          #define INIT_YEAR 2023 // 初始化年
  16          #define INIT_MONTH 9   // 初始化月
  17          #define INIT_DAY 19    // 初始化日
  18          
  19          #define INIT_ALARM_CLOCK 1            // 初始化闹钟功能，1表示开，0表示关
  20          #define INIT_ALARM_CLOCK_HOUR 0       // 初始化闹钟时
  21          #define INIT_ALARM_CLOCK_MINUTE 1     // 初始化闹钟分
  22          #define INIT_ALARM_CLOCK_WEEKDAY 0x00 // 初始化闹钟星期
  23          #define ALARM_CLOCK_TIMES 6           // 闹钟响铃次数
  24          
  25          #define INIT_HOURLY_CHIME 0  // 初始化整点报时功能，1表示开，0表示关
  26          #define HOURLY_CHIME_TIMES 3 // 整点响铃次数
  27          
  28          #define HOUR_ADDR 0x00   // 时在AT24C02中的存储地址
  29          #define MINUTE_ADDR 0x01 // 分在AT24C02中的存储地址
  30          #define SECOND_ADDR 0x02 // 秒在AT24C02中的存储地址
  31          
  32          #define YEAR_ADDR_H 0x03 // 年的高位在AT24C02中的存储地址
  33          #define YEAR_ADDR_L 0x04 // 年的低位在AT24C02中的存储地址
  34          #define MONTH_ADDR 0x05  // 月在AT24C02中的存储地址
  35          #define DAY_ADDR 0x06    // 日在AT24C02中的存储地址
  36          
  37          #define ALARM_CLOCK_HOUR_ADDR 0x07    // 闹钟时在AT24C02中的存储地址
  38          #define ALARM_CLOCK_MINUTE_ADDR 0x08  // 闹钟分在AT24C02中的存储地址
  39          #define ALARM_CLOCK_WEEKDAY_ADDR 0x09 // 闹钟星期在AT24C02中的存储地址
  40          
  41          #define ALARM_CLOCK_ADDR 0x0A // 闹钟功能在AT24C02中的存储地址
  42          
  43          #define HOURLY_CHIME_ADDR 0x0B // 整点报时功能在AT24C02中的存储地址
  44          
  45          unsigned char xdata hour = INIT_HOUR;     // 初始化时
  46          unsigned char xdata minute = INIT_MINUTE; // 初始化分
  47          unsigned char xdata second = INIT_SECOND; // 初始化秒
  48          
  49          unsigned int xdata year = INIT_YEAR;    // 初始化年
  50          unsigned char xdata month = INIT_MONTH; // 初始化月
  51          unsigned char xdata day = INIT_DAY;     // 初始化日
  52          
  53          char xdata weekday = 0; // 星期，星期初始化任务由init()函数负责
  54          
  55          unsigned char alarmClockHour = INIT_ALARM_CLOCK_HOUR;       // 初始化闹钟时
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 2   

  56          unsigned char alarmClockMinute = INIT_ALARM_CLOCK_MINUTE;   // 初始化闹钟分
  57          unsigned char alarmClockWeekday = INIT_ALARM_CLOCK_WEEKDAY; // 初始化闹钟星期功能，低0位为1表示周日响，低1
             -位为1表示周一响，以此类推
  58          
  59          bit alarmClock = INIT_ALARM_CLOCK; // 初始化闹钟功能，1表示开，0表示关
  60          
  61          bit hourlyChime = INIT_HOURLY_CHIME; // 初始化整点报时功能，1表示开，0表示关
  62          
  63          bit buttonDown = 0;            // 用于判断是否有按键按下，1为有，0为无
  64          bit button = 0;                // 用于判断按下的是哪个按键
  65          unsigned int checkCount = 0;   // 用于检查按键是长按还是短按
  66          unsigned char shortOrLang = 0; // 用于表示按键是长按还是短按的标志，0表示无效，1表示短按，2表示长按
  67          
  68          unsigned char line[4][17] = {"                ", "                ", "                ", "                
             -"}; // 各行的显示字符
  69          
  70          unsigned char hourlyChimeTimes = 0; // 记录整点报时的响铃次数
  71          unsigned char alarmClockTimes = 0;  // 记录闹钟的响铃次数
  72          
  73          unsigned int stopwatchMSecond = 0; // 秒表的毫秒数
  74          unsigned char stopwatchSecond = 0; // 秒表的秒数
  75          unsigned char stopwatchMinute = 0; // 秒表的分数
  76          unsigned int recordNum = 0;        // 记录次数
  77          
  78          unsigned char xdata setAlarmClockHour = INIT_ALARM_CLOCK_HOUR;       // 设置闹钟时的变量
  79          unsigned char xdata setAlarmClockMinute = INIT_ALARM_CLOCK_MINUTE;   // 设置闹钟分的变量
  80          unsigned char xdata setAlarmClockWeekday = INIT_ALARM_CLOCK_WEEKDAY; // 设置闹钟星期的变量，低0位为1表示周
             -日响，低1位为1表示周一响，以此类推
  81          
  82          unsigned char xdata setHour = INIT_HOUR;     // 设置时的变量
  83          unsigned char xdata setMinute = INIT_MINUTE; // 设置分的变量
  84          unsigned char xdata setSecond = INIT_SECOND; // 设置秒的变量
  85          
  86          unsigned char xdata setTimeIndex = 0;              // 用于判断当前设置的对象（时、分、秒）
  87          unsigned char xdata setDateIndex = 0;              // 用于判断当前设置的对象（年、月、日）
  88          bit setAlarmClockTimeIndex = 0;                    // 用于判断当前设置的对象（闹钟时、闹钟分）
  89          unsigned char xdata setAlarmClockWeekdayIndex = 0; // 用于判断当前设置的对象（闹钟星期）
  90          
  91          enum MODE
  92          {
  93              SHOW,                    // 显示模式
  94              SET_TIME,                // 设置时间模式
  95              SET_DATE,                // 设置日期模式
  96              STOPWATCH,               // 秒表模式
  97              STOPWATCH_START,         // 秒表计时模式
  98              STOPWATCH_PAUSE,         // 秒表暂停模式
  99              ALARM_CLOCK,             // 闹钟模式
 100              SET_ALARM_CLOCK_TIME,    // 设置闹钟时间模式
 101              SET_ALARM_CLOCK_WEEKDAY, // 设置闹钟星期模式
 102          };
 103          
 104          unsigned char mode = SHOW; // 模式
 105          
 106          unsigned int interruptCount = 0; // 中断次数
 107          
 108          sbit Chime = P2 ^ 2; // 蜂鸣器
 109          
 110          sbit P3_2 = P3 ^ 2; // 外部中断0的控制引脚
 111          sbit P3_3 = P3 ^ 3; // 外部中断1的控制引脚
 112          
 113          unsigned char code Seg_Date[] = {
 114              31, // 1月
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 3   

 115              28, // 2月
 116              31, // 3月
 117              30, // 4月
 118              31, // 5月
 119              30, // 6月
 120              31, // 7月
 121              31, // 8月
 122              30, // 9月
 123              31, // 10月
 124              30, // 11月
 125              31  // 12月
 126          };
 127          
 128          // 初始化
 129          void Init();
 130          // 切换模式
 131          void ChangeMode(MODE);
 132          // 检查当前按键是长按还是短按
 133          void Check();
 134          // 按键短按
 135          void ShortPress();
 136          // 按键长按
 137          void LongPress();
 138          // 秒数增加
 139          void SecondIncrease();
 140          // 日期增加
 141          void DateIncrease();
 142          // 更新日期
 143          void UpdateWeekday();
 144          // 存储时间
 145          void SaveTime();
 146          // 装载时间
 147          void LoadTime();
 148          // 存储日期
 149          void SaveDate();
 150          // 装载日期
 151          void LoadDate();
 152          // 存储闹钟
 153          void SaveAlarm();
 154          // 装载闹钟
 155          void LoadAlarm();
 156          // 显示时间
 157          void DisplayTime();
 158          // 显示日期
 159          void DisplayDate();
 160          // 显示星期
 161          void DisplayWeekday();
 162          // 显示温度
 163          void DisplayTemperature();
 164          // 显示整点报时功能
 165          void DisplayHourlyChime();
 166          // 清空字符串
 167          void ClearChar(unsigned char *str);
 168          // 检查日期函数，返回0表示日期无误，返回1表示日期有误
 169          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 170          
 171          void main()
 172          {
 173   1          Init();
 174   1          while (1)
 175   1          {
 176   2              ;
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 4   

 177   2          }
 178   1      }
 179          
 180          // 初始化
 181          void Init()
 182          {
 183   1          LoadTime();
 184   1          LoadDate();
 185   1          LoadAlarm();
 186   1      
 187   1          LCD12864_Init(); // 初始化液晶屏
 188   1      
 189   1          UpdateWeekday(); // 初始化星期
 190   1      
 191   1          ChangeMode(SHOW);
 192   1      
 193   1          Chime = 0; // 初始化蜂鸣器引脚为0，防止损坏蜂鸣器
 194   1      
 195   1          EA = 1;      // 开启总中断
 196   1          IT0 = 1;     // 设置外部中断0为边沿触发方式
 197   1          EX0 = 1;     // 允许外部中断0
 198   1          IT1 = 1;     // 设置外部中断1为边沿触发方式
 199   1          EX1 = 1;     // 允许外部中断1
 200   1          PT0 = 1;     // 计时器0中断优先级为最高
 201   1          TMOD = 0x01; // 设置计时器0工作在方式1
 202   1          ET0 = 1;     // 允许计时器0中断
 203   1          TR0 = 1;     // 启动计时器
 204   1      
 205   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 206   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 207   1      }
 208          
 209          // 切换模式
 210          void ChangeMode(MODE)
 211          {
 212   1          unsigned char i = 0;
 213   1          mode = MODE;
 214   1          switch (mode)
 215   1          {
 216   2          case SHOW:
 217   2              ClearChar(line[0]);
 218   2              ClearChar(line[1]);
 219   2              ClearChar(line[2]);
 220   2              ClearChar(line[3]);
 221   2      
 222   2              DisplayTime();
 223   2              DisplayDate();
 224   2              DisplayWeekday();
 225   2              DisplayTemperature();
 226   2              DisplayHourlyChime();
 227   2              break;
 228   2          case STOPWATCH:
 229   2              recordNum = 0;
 230   2      
 231   2              ClearChar(line[0]);
 232   2              ClearChar(line[1]);
 233   2              ClearChar(line[2]);
 234   2              ClearChar(line[3]);
 235   2      
 236   2              stopwatchMinute = 0;
 237   2              stopwatchSecond = 0;
 238   2              stopwatchMSecond = 0;
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 5   

 239   2      
 240   2              line[0][4] = stopwatchMinute / 10 + '0'; // 分十位
 241   2              line[0][5] = stopwatchMinute % 10 + '0'; // 分个位
 242   2              line[0][6] = ':';
 243   2              line[0][7] = stopwatchSecond / 10 + '0'; // 秒十位
 244   2              line[0][8] = stopwatchSecond % 10 + '0'; // 秒个位
 245   2              line[0][9] = ':';
 246   2              line[0][10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 247   2              line[0][11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 248   2      
 249   2              LCD12864_DisplayOneLine(0, line[0]);
 250   2              LCD12864_DisplayOneLine(1, line[1]);
 251   2              LCD12864_DisplayOneLine(2, line[2]);
 252   2              LCD12864_DisplayOneLine(3, line[3]);
 253   2              break;
 254   2          case ALARM_CLOCK:
 255   2              ClearChar(line[0]);
 256   2              ClearChar(line[1]);
 257   2              ClearChar(line[2]);
 258   2              ClearChar(line[3]);
 259   2      
 260   2              setAlarmClockHour = alarmClockHour;
 261   2              setAlarmClockMinute = alarmClockMinute;
 262   2              setAlarmClockWeekday = alarmClockWeekday;
 263   2      
 264   2              line[0][5] = alarmClockHour / 10 + '0';
 265   2              line[0][6] = alarmClockHour % 10 + '0';
 266   2              line[0][7] = ':';
 267   2              line[0][8] = alarmClockMinute / 10 + '0';
 268   2              line[0][9] = alarmClockMinute % 10 + '0';
 269   2      
 270   2              for (i = 0; i < 7; i++)
 271   2              {
 272   3                  if (alarmClockWeekday & (1 << i))
 273   3                      strncpy(line[2] + 2 * i, "开", 2);
 274   3                  else
 275   3                      strncpy(line[2] + 2 * i, "关", 2);
 276   3              }
 277   2      
 278   2              if (alarmClock)
 279   2                  strncpy(line[2] + 14, "开", 2);
 280   2              else
 281   2                  strncpy(line[2] + 14, "关", 2);
 282   2      
 283   2              strcpy(line[3], "日一二");
 284   2              line[3][6] = 0xC8;
 285   2              line[3][7] = 0xFD;
 286   2              strcpy(line[3] + 8, "四五六总");
 287   2      
 288   2              LCD12864_DisplayOneLine(0, line[0]);
 289   2              LCD12864_DisplayOneLine(1, line[1]);
 290   2              LCD12864_DisplayOneLine(2, line[2]);
 291   2              LCD12864_DisplayOneLine(3, line[3]);
 292   2          default:
 293   2              break;
 294   2          }
 295   1      }
 296          
 297          // 检查当前按键是长按还是短按
 298          void Check()
 299          {
 300   1          checkCount++; // 按键时间计数
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 6   

 301   1      
 302   1          if (checkCount < 10 / INTERVAL) // 10ms延迟去抖动
 303   1              return;
 304   1      
 305   1          if (checkCount > 1010 / INTERVAL) // 如果按下时间大于一秒，为长按
 306   1          {
 307   2              shortOrLang = 2;
 308   2              checkCount = 0;
 309   2              buttonDown = 0;
 310   2          }
 311   1          else // 如果按下时间小于一秒，则判断是否松开，若松开，则为短按，否则继续计数
 312   1          {
 313   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 314   2              {
 315   3                  shortOrLang = 1;
 316   3                  checkCount = 0;
 317   3                  buttonDown = 0;
 318   3              }
 319   2          }
 320   1      }
 321          
 322          // 按键短按
 323          void ShortPress()
 324          {
 325   1          if (button == 0) // 如果按的是键A
 326   1          {
 327   2              switch (mode)
 328   2              {
 329   3              case SHOW:
 330   3                  ChangeMode(STOPWATCH);
 331   3                  break;
 332   3              case STOPWATCH:
 333   3                  ChangeMode(ALARM_CLOCK);
 334   3                  break;
 335   3              case STOPWATCH_START:
 336   3              case STOPWATCH_PAUSE:
 337   3                  ClearChar(line[recordNum % 3 + 1]);
 338   3      
 339   3                  line[recordNum % 3 + 1][0] = ((recordNum + 1) % 1000) / 100 + '0'; // 编号百位
 340   3                  line[recordNum % 3 + 1][1] = ((recordNum + 1) % 100) / 10 + '0';   // 编号十位
 341   3                  line[recordNum % 3 + 1][2] = ((recordNum + 1) % 10) + '0';         // 编号个位
 342   3      
 343   3                  line[recordNum % 3 + 1][4] = stopwatchMinute / 10 + '0'; // 分十位
 344   3                  line[recordNum % 3 + 1][5] = stopwatchMinute % 10 + '0'; // 分个位
 345   3                  line[recordNum % 3 + 1][6] = ':';
 346   3                  line[recordNum % 3 + 1][7] = stopwatchSecond / 10 + '0'; // 秒十位
 347   3                  line[recordNum % 3 + 1][8] = stopwatchSecond % 10 + '0'; // 秒个位
 348   3                  line[recordNum % 3 + 1][9] = ':';
 349   3                  line[recordNum % 3 + 1][10] = stopwatchMSecond / 100 + '0';     // 毫秒百位
 350   3                  line[recordNum % 3 + 1][11] = stopwatchMSecond / 10 % 10 + '0'; // 毫秒十位
 351   3      
 352   3                  LCD12864_DisplayOneLine(recordNum % 3 + 1, line[recordNum % 3 + 1]);
 353   3      
 354   3                  recordNum++;
 355   3                  break;
 356   3              case ALARM_CLOCK:
 357   3                  ChangeMode(SHOW);
 358   3                  break;
 359   3              case SET_TIME:
 360   3                  line[0][4] = setHour / 10 + '0';    // 时十位
 361   3                  line[0][5] = setHour % 10 + '0';    // 时个位
 362   3                  line[0][7] = setMinute / 10 + '0';  // 分十位
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 7   

 363   3                  line[0][8] = setMinute % 10 + '0';  // 分个位
 364   3                  line[0][10] = setSecond / 10 + '0'; // 秒十位
 365   3                  line[0][11] = setSecond % 10 + '0'; // 秒个位
 366   3      
 367   3                  setTimeIndex = (setTimeIndex + 1) % 3;
 368   3                  break;
 369   3              case SET_DATE:
 370   3                  line[1][3] = year / 1000 + '0';     // 年千位
 371   3                  line[1][4] = year / 100 % 10 + '0'; // 年百位
 372   3                  line[1][5] = year / 10 % 10 + '0';  // 年十位
 373   3                  line[1][6] = year % 10 + '0';       // 年个位
 374   3                  line[1][8] = month / 10 + '0';      // 月十位
 375   3                  line[1][9] = month % 10 + '0';      // 月个位
 376   3                  line[1][11] = day / 10 + '0';       // 日十位
 377   3                  line[1][12] = day % 10 + '0';       // 日个位
 378   3      
 379   3                  setDateIndex = (setDateIndex + 1) % 3;
 380   3                  break;
 381   3              case SET_ALARM_CLOCK_TIME:
 382   3                  line[0][5] = setAlarmClockHour / 10 + '0';
 383   3                  line[0][6] = setAlarmClockHour % 10 + '0';
 384   3                  line[0][8] = setAlarmClockMinute / 10 + '0';
 385   3                  line[0][9] = setAlarmClockMinute % 10 + '0';
 386   3      
 387   3                  setAlarmClockTimeIndex = !setAlarmClockTimeIndex;
 388   3      
 389   3                  if (!setAlarmClockTimeIndex)
 390   3                      ChangeMode(SET_ALARM_CLOCK_WEEKDAY);
 391   3      
 392   3                  break;
 393   3              case SET_ALARM_CLOCK_WEEKDAY:
 394   3                  if (setAlarmClockWeekday & (1 << setAlarmClockWeekdayIndex))
 395   3                      strncpy(line[2] + setAlarmClockWeekdayIndex * 2, "开", 2);
 396   3                  else
 397   3                      strncpy(line[2] + setAlarmClockWeekdayIndex * 2, "关", 2);
 398   3      
 399   3                  setAlarmClockWeekdayIndex = (setAlarmClockWeekdayIndex + 1) % 7;
 400   3      
 401   3                  if (setAlarmClockWeekdayIndex == 0)
 402   3                      ChangeMode(SET_ALARM_CLOCK_TIME);
 403   3      
 404   3                  break;
 405   3              default:
 406   3                  break;
 407   3              }
 408   2          }
 409   1          else
 410   1          {
 411   2              switch (mode)
 412   2              {
 413   3              case SHOW:
 414   3                  hourlyChime = !hourlyChime;
 415   3                  SaveTime();
 416   3                  DisplayHourlyChime();
 417   3                  break;
 418   3              case SET_DATE:
 419   3                  if (setDateIndex == 0)
 420   3                  {
 421   4                      year++;
 422   4                      year %= 10000;
 423   4                  }
 424   3                  else if (setDateIndex == 1)
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 8   

 425   3                  {
 426   4                      month = (month % 12) + 1;
 427   4                  }
 428   3                  else
 429   3                  {
 430   4                      if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // 闰年2月
 431   4                          day = (day % 29) + 1;
 432   4                      else
 433   4                          day = (day % Seg_Date[month - 1]) + 1;
 434   4                  }
 435   3                  UpdateWeekday();
 436   3                  DisplayWeekday();
 437   3                  break;
 438   3              case SET_TIME:
 439   3                  if (setTimeIndex == 0)
 440   3                  {
 441   4                      setHour++;
 442   4                      setHour %= 24;
 443   4                  }
 444   3                  else if (setTimeIndex == 1)
 445   3                  {
 446   4                      setMinute++;
 447   4                      setMinute %= 60;
 448   4                  }
 449   3                  else
 450   3                  {
 451   4                      setSecond++;
 452   4                      setSecond %= 60;
 453   4                  }
 454   3                  break;
 455   3              case STOPWATCH:
 456   3                  ChangeMode(STOPWATCH_START);
 457   3                  break;
 458   3              case STOPWATCH_START:
 459   3                  ChangeMode(STOPWATCH_PAUSE);
 460   3                  break;
 461   3              case STOPWATCH_PAUSE:
 462   3                  ChangeMode(STOPWATCH_START);
 463   3                  break;
 464   3              case ALARM_CLOCK:
 465   3                  alarmClock = !alarmClock;
 466   3                  SaveAlarm();
 467   3                  if (alarmClock)
 468   3                      strncpy(line[2] + 14, "开", 2);
 469   3                  else
 470   3                      strncpy(line[2] + 14, "关", 2);
 471   3                  LCD12864_DisplayOneLine(2, line[2]);
 472   3                  break;
 473   3              case SET_ALARM_CLOCK_TIME:
 474   3                  if (!setAlarmClockTimeIndex)
 475   3                  {
 476   4                      setAlarmClockHour++;
 477   4                      setAlarmClockHour %= 24;
 478   4                  }
 479   3                  else
 480   3                  {
 481   4                      setAlarmClockMinute++;
 482   4                      setAlarmClockMinute %= 60;
 483   4                  }
 484   3                  break;
 485   3              case SET_ALARM_CLOCK_WEEKDAY:
 486   3                  setAlarmClockWeekday = setAlarmClockWeekday ^ (1 << setAlarmClockWeekdayIndex); // 对应位取反
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 9   

 487   3                  break;
 488   3              default:
 489   3                  break;
 490   3              }
 491   2          }
 492   1      
 493   1          shortOrLang = 0; // 重置按键标志
 494   1      }
 495          
 496          // 按键长按
 497          void LongPress()
 498          {
 499   1          if (button == 0) // 如果按的是键A
 500   1          {
 501   2              switch (mode)
 502   2              {
 503   3              case SHOW:
 504   3                  setHour = hour;
 505   3                  setMinute = minute;
 506   3                  setSecond = second;
 507   3                  setTimeIndex = 0;
 508   3                  ChangeMode(SET_TIME);
 509   3                  break;
 510   3              case SET_DATE:
 511   3                  if (!CheckDate(year, month, day)) // 如果日期无误才能确定
 512   3                  {
 513   4                      SaveDate();
 514   4                      ChangeMode(SHOW);
 515   4                  }
 516   3                  break;
 517   3              case SET_TIME:
 518   3                  hour = setHour;
 519   3                  minute = setMinute;
 520   3                  second = setSecond;
 521   3                  SaveTime();
 522   3                  ChangeMode(SHOW);
 523   3                  break;
 524   3              case ALARM_CLOCK:
 525   3                  ChangeMode(SET_ALARM_CLOCK_TIME);
 526   3                  break;
 527   3              case SET_ALARM_CLOCK_TIME:
 528   3              case SET_ALARM_CLOCK_WEEKDAY:
 529   3                  alarmClockHour = setAlarmClockHour;
 530   3                  alarmClockMinute = setAlarmClockMinute;
 531   3                  alarmClockWeekday = setAlarmClockWeekday;
 532   3                  SaveAlarm();
 533   3                  ChangeMode(ALARM_CLOCK);
 534   3                  break;
 535   3              default:
 536   3                  break;
 537   3              }
 538   2          }
 539   1          else
 540   1          {
 541   2              switch (mode)
 542   2              {
 543   3              case SHOW:
 544   3                  setDateIndex = 0;
 545   3                  ChangeMode(SET_DATE);
 546   3                  break;
 547   3              case SET_TIME:
 548   3                  ChangeMode(SHOW);
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 10  

 549   3                  break;
 550   3              case SET_DATE:
 551   3                  if (setDateIndex == 0)
 552   3                  {
 553   4                      year--;
 554   4                      year %= 10000;
 555   4                  }
 556   3                  else if (setDateIndex == 1)
 557   3                  {
 558   4                      month += 10;
 559   4                      month = (month % 12) + 1;
 560   4                  }
 561   3                  else
 562   3                  {
 563   4                      if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 564   4                      {
 565   5                          day += 29 - 2;
 566   5                          day = (day % 29) + 1;
 567   5                      }
 568   4                      else
 569   4                      {
 570   5                          day += Seg_Date[month - 1] - 2;
 571   5                          day = (day % Seg_Date[month - 1]) + 1;
 572   5                      }
 573   4                  }
 574   3                  UpdateWeekday();
 575   3                  DisplayWeekday();
 576   3                  break;
 577   3              case STOPWATCH_PAUSE:
 578   3                  ChangeMode(STOPWATCH);
 579   3                  break;
 580   3              case SET_ALARM_CLOCK_TIME:
 581   3              case SET_ALARM_CLOCK_WEEKDAY:
 582   3                  setAlarmClockHour = alarmClockHour;
 583   3                  setAlarmClockMinute = alarmClockMinute;
 584   3                  setAlarmClockWeekday = alarmClockWeekday;
 585   3                  ChangeMode(ALARM_CLOCK);
 586   3                  break;
 587   3              default:
 588   3                  break;
 589   3              }
 590   2          }
 591   1      
 592   1          shortOrLang = 0; // 重置按键标志
 593   1      }
 594          
 595          // 秒数增加
 596          void SecondIncrease()
 597          {
 598   1          second++;
 599   1          if (second > 59)
 600   1          {
 601   2              second = 0;
 602   2              minute++;
 603   2          }
 604   1      
 605   1          if (minute > 59)
 606   1          {
 607   2              minute = 0;
 608   2              hour++;
 609   2          }
 610   1      
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 11  

 611   1          if (hour > 23)
 612   1          {
 613   2              hour = 0;
 614   2          }
 615   1      }
 616          
 617          // 日期增加
 618          void DateIncrease()
 619          {
 620   1          day++;
 621   1          if (CheckDate(year, month, day))
 622   1          {
 623   2              day = 1;
 624   2              month++;
 625   2              if (month > 12)
 626   2              {
 627   3                  month = 1;
 628   3                  year++;
 629   3              }
 630   2          }
 631   1      }
 632          
 633          // 更新日期
 634          void UpdateWeekday()
 635          {
 636   1          weekday = (month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) - 
             -1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1;
 637   1      
 638   1          while (weekday < 0)
 639   1          {
 640   2              weekday += 7;
 641   2          }
 642   1      
 643   1          weekday %= 7;
 644   1      }
 645          
 646          // 存储时间
 647          void SaveTime()
 648          {
 649   1          AT24C02_Write(HOUR_ADDR, hour);
 650   1          AT24C02_Write(MINUTE_ADDR, minute);
 651   1          AT24C02_Write(SECOND_ADDR, second);
 652   1          AT24C02_Write(HOURLY_CHIME_ADDR, hourlyChime);
 653   1      }
 654          
 655          // 装载时间
 656          void LoadTime()
 657          {
 658   1          hour = AT24C02_Read(HOUR_ADDR);
 659   1          minute = AT24C02_Read(MINUTE_ADDR);
 660   1          second = AT24C02_Read(SECOND_ADDR);
 661   1          hourlyChime = AT24C02_Read(HOURLY_CHIME_ADDR) ? 1 : 0;
 662   1      }
 663          
 664          // 存储日期
 665          void SaveDate()
 666          {
 667   1          AT24C02_Write(YEAR_ADDR_L, year % 256);
 668   1          AT24C02_Write(YEAR_ADDR_H, year / 256);
 669   1          AT24C02_Write(MONTH_ADDR, month);
 670   1          AT24C02_Write(DAY_ADDR, day);
 671   1      }
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 12  

 672          
 673          // 装载日期
 674          void LoadDate()
 675          {
 676   1          year = 0;
 677   1          year += AT24C02_Read(YEAR_ADDR_L);
 678   1          year += AT24C02_Read(YEAR_ADDR_H) * 256;
 679   1          month = AT24C02_Read(MONTH_ADDR);
 680   1          day = AT24C02_Read(DAY_ADDR);
 681   1      }
 682          
 683          // 存储闹钟
 684          void SaveAlarm()
 685          {
 686   1          AT24C02_Write(ALARM_CLOCK_HOUR_ADDR, alarmClockHour);
 687   1          AT24C02_Write(ALARM_CLOCK_MINUTE_ADDR, alarmClockMinute);
 688   1          AT24C02_Write(ALARM_CLOCK_WEEKDAY_ADDR, alarmClockWeekday);
 689   1          AT24C02_Write(ALARM_CLOCK_ADDR, alarmClock);
 690   1      }
 691          
 692          // 装载闹钟
 693          void LoadAlarm()
 694          {
 695   1          alarmClockHour = AT24C02_Read(ALARM_CLOCK_HOUR_ADDR);
 696   1          alarmClockMinute = AT24C02_Read(ALARM_CLOCK_MINUTE_ADDR);
 697   1          alarmClockWeekday = AT24C02_Read(ALARM_CLOCK_WEEKDAY_ADDR);
 698   1          alarmClock = AT24C02_Read(ALARM_CLOCK_ADDR) ? 1 : 0;
 699   1      }
 700          
 701          // 显示时间
 702          void DisplayTime()
 703          {
 704   1          line[0][4] = hour / 10 + '0'; // 时十位
 705   1          line[0][5] = hour % 10 + '0'; // 时个位
 706   1          line[0][6] = ':';
 707   1          line[0][7] = minute / 10 + '0'; // 分十位
 708   1          line[0][8] = minute % 10 + '0'; // 分个位
 709   1          line[0][9] = ':';
 710   1          line[0][10] = second / 10 + '0'; // 秒十位
 711   1          line[0][11] = second % 10 + '0'; // 秒个位
 712   1      
 713   1          LCD12864_DisplayOneLine(0, line[0]);
 714   1      }
 715          
 716          // 显示日期
 717          void DisplayDate()
 718          {
 719   1          line[1][3] = year / 1000 + '0';     // 年千位
 720   1          line[1][4] = year / 100 % 10 + '0'; // 年百位
 721   1          line[1][5] = year / 10 % 10 + '0';  // 年十位
 722   1          line[1][6] = year % 10 + '0';       // 年个位
 723   1          line[1][7] = '-';
 724   1          line[1][8] = month / 10 + '0'; // 月十位
 725   1          line[1][9] = month % 10 + '0'; // 月个位
 726   1          line[1][10] = '-';
 727   1          line[1][11] = day / 10 + '0'; // 日十位
 728   1          line[1][12] = day % 10 + '0'; // 日个位
 729   1      
 730   1          LCD12864_DisplayOneLine(1, line[1]);
 731   1      }
 732          
 733          // 显示星期
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 13  

 734          void DisplayWeekday()
 735          {
 736   1          switch (weekday)
 737   1          {
 738   2          case 0:
 739   2              strncpy(line[2] + 2, "周日", 4);
 740   2              break;
 741   2          case 1:
 742   2              strncpy(line[2] + 2, "周一", 4);
 743   2              break;
 744   2          case 2:
 745   2              strncpy(line[2] + 2, "周二", 4);
 746   2              break;
 747   2          case 3:
 748   2              strncpy(line[2] + 2, "周", 2);
 749   2              line[2][4] = 0xC8;
 750   2              line[2][5] = 0xFD;
 751   2              break;
 752   2          case 4:
 753   2              strncpy(line[2] + 2, "周四", 4);
 754   2              break;
 755   2          case 5:
 756   2              strncpy(line[2] + 2, "周五", 4);
 757   2              break;
 758   2          case 6:
 759   2              strncpy(line[2] + 2, "周六", 4);
 760   2              break;
 761   2          default:
 762   2              break;
 763   2          }
 764   1      
 765   1          LCD12864_DisplayOneLine(2, line[2]);
 766   1      }
 767          // 显示温度
 768          void DisplayTemperature()
 769          {
 770   1          line[2][8] = (DS18B20_ReadTemperature() >> 4) / 10 + '0';
 771   1          line[2][9] = (DS18B20_ReadTemperature() >> 4) % 10 + '0';
 772   1          line[2][10] = '.';
 773   1          line[2][11] = Array_Point[DS18B20_ReadTemperature() & 0x000F] + '0';
 774   1          line[2][12] = 0xA1;
 775   1          line[2][13] = 0xE6;
 776   1      
 777   1          LCD12864_DisplayOneLine(2, line[2]);
 778   1      }
 779          
 780          // 显示整点报时功能
 781          void DisplayHourlyChime()
 782          {
 783   1          strncpy(line[3] + 2, "整点报时  ", 10);
 784   1          if (hourlyChime)
 785   1              strncpy(line[3] + 12, "开", 2);
 786   1          else
 787   1              strncpy(line[3] + 12, "关", 2);
 788   1      
 789   1          LCD12864_DisplayOneLine(3, line[3]);
 790   1      }
 791          
 792          // 检查日期程序，返回0表示日期无误，返回1表示日期有误
 793          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 794          {
 795   1          if (month > 12 || month < 1)
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 14  

 796   1              return 1; // 月份有误
 797   1      
 798   1          if (day < 1)
 799   1              return 1; // 日期有误
 800   1      
 801   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 802   1          {
 803   2              if (day > 29)
 804   2                  return 1; // 闰年2月29日有误
 805   2          }
 806   1          else
 807   1          {
 808   2              if (day > Seg_Date[month - 1])
 809   2                  return 1;
 810   2          }
 811   1      
 812   1          return 0;
 813   1      }
 814          
 815          // 清空字符串
 816          void ClearChar(unsigned char *str)
 817          {
 818   1          unsigned char len = strlen(str);
 819   1          unsigned char i = 0;
 820   1          for (i = 0; i < len; i++)
 821   1          {
 822   2              str[i] = ' ';
 823   2          }
 824   1      }
 825          
 826          void Int0() interrupt 0
 827          {
 828   1          if (buttonDown == 0)
 829   1          {
 830   2              buttonDown = 1;
 831   2              button = 0;
 832   2          }
 833   1      }
 834          
 835          void Int1() interrupt 2
 836          {
 837   1          if (buttonDown == 0)
 838   1          {
 839   2              buttonDown = 1;
 840   2              button = 1;
 841   2          }
 842   1      }
 843          
 844          // 计时器0中断服务函数
 845          void Timer0() interrupt 1
 846          {
 847   1          interruptCount++;
 848   1      
 849   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 850   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 851   1      
 852   1          if (interruptCount == (1000 / INTERVAL))
 853   1          { // 1秒
 854   2              interruptCount = 0;
 855   2              SecondIncrease();
 856   2              SaveTime();
 857   2              if (mode == SHOW)
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 15  

 858   2              {
 859   3                  DisplayTime();
 860   3                  DisplayTemperature();
 861   3              }
 862   2              if (hour == 0 && minute == 0 && second == 0)
 863   2              {
 864   3                  DateIncrease();
 865   3                  UpdateWeekday();
 866   3                  SaveDate();
 867   3                  if (mode == SHOW)
 868   3                  {
 869   4                      DisplayDate();
 870   4                      DisplayWeekday();
 871   4                  }
 872   3              }
 873   2          }
 874   1      
 875   1          if (buttonDown == 1)
 876   1          {
 877   2              Check();
 878   2          }
 879   1      
 880   1          if (shortOrLang == 1)
 881   1          {
 882   2              ShortPress();
 883   2          }
 884   1          else if (shortOrLang == 2)
 885   1          {
 886   2              LongPress();
 887   2          }
 888   1      
 889   1          if (mode == SHOW && alarmClock == 1)
 890   1          {
 891   2              if (hour == alarmClockHour && minute == alarmClockMinute && second == 00 && (alarmClockWeekday & (
             -1 << weekday)) > 0 && interruptCount == 0)
 892   2                  alarmClockTimes = 2 * ALARM_CLOCK_TIMES;
 893   2              if (alarmClockTimes != 0)
 894   2              {
 895   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 896   3                      Chime = !Chime;
 897   3                  else
 898   3                      Chime = 0;
 899   3                  if (interruptCount % (250 / INTERVAL) == 0)
 900   3                  {
 901   4                      alarmClockTimes--;
 902   4                      Chime = 0;
 903   4                  }
 904   3              }
 905   2          }
 906   1      
 907   1          if (mode == SHOW && hourlyChime == 1 && minute == 0 && second < 3)
 908   1          {
 909   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 910   2                  hourlyChimeTimes = 2 * (HOURLY_CHIME_TIMES + 1);
 911   2              if (hourlyChimeTimes != 0)
 912   2              {
 913   3                  if (interruptCount > (500 / INTERVAL))
 914   3                      Chime = !Chime;
 915   3                  else
 916   3                      Chime = 0;
 917   3                  if (interruptCount % (500 / INTERVAL) == 0)
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 16  

 918   3                  {
 919   4                      hourlyChimeTimes--;
 920   4                      Chime = 0;
 921   4                  }
 922   3              }
 923   2          }
 924   1      
 925   1          switch (mode)
 926   1          {
 927   2          case SET_TIME:
 928   2              if (setTimeIndex == 0)
 929   2              {
 930   3                  if (interruptCount < (500 / INTERVAL))
 931   3                  {
 932   4                      line[0][4] = setHour / 10 + '0';
 933   4                      line[0][5] = setHour % 10 + '0';
 934   4                  }
 935   3                  else
 936   3                  {
 937   4                      line[0][4] = ' ';
 938   4                      line[0][5] = ' ';
 939   4                  }
 940   3              }
 941   2              else if (setTimeIndex == 1)
 942   2              {
 943   3                  if (interruptCount < (500 / INTERVAL))
 944   3                  {
 945   4                      line[0][7] = setMinute / 10 + '0';
 946   4                      line[0][8] = setMinute % 10 + '0';
 947   4                  }
 948   3                  else
 949   3                  {
 950   4                      line[0][7] = ' ';
 951   4                      line[0][8] = ' ';
 952   4                  }
 953   3              }
 954   2              else
 955   2              {
 956   3                  if (interruptCount < (500 / INTERVAL))
 957   3                  {
 958   4                      line[0][10] = setSecond / 10 + '0';
 959   4                      line[0][11] = setSecond % 10 + '0';
 960   4                  }
 961   3                  else
 962   3                  {
 963   4                      line[0][10] = ' ';
 964   4                      line[0][11] = ' ';
 965   4                  }
 966   3              }
 967   2              LCD12864_DisplayOneLine(0, line[0]);
 968   2              break;
 969   2          case SET_DATE:
 970   2              if (setDateIndex == 0)
 971   2              {
 972   3                  if (interruptCount < (500 / INTERVAL))
 973   3                  {
 974   4                      line[1][3] = year / 1000 + '0';
 975   4                      line[1][4] = year / 100 % 10 + '0';
 976   4                      line[1][5] = year / 10 % 10 + '0';
 977   4                      line[1][6] = year % 10 + '0';
 978   4                  }
 979   3                  else
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 17  

 980   3                  {
 981   4                      line[1][3] = ' ';
 982   4                      line[1][4] = ' ';
 983   4                      line[1][5] = ' ';
 984   4                      line[1][6] = ' ';
 985   4                  }
 986   3              }
 987   2              else if (setDateIndex == 1)
 988   2              {
 989   3                  if (interruptCount < (500 / INTERVAL))
 990   3                  {
 991   4                      line[1][8] = month / 10 + '0';
 992   4                      line[1][9] = month % 10 + '0';
 993   4                  }
 994   3                  else
 995   3                  {
 996   4                      line[1][8] = ' ';
 997   4                      line[1][9] = ' ';
 998   4                  }
 999   3              }
1000   2              else
1001   2              {
1002   3                  if (interruptCount < (500 / INTERVAL))
1003   3                  {
1004   4                      line[1][11] = day / 10 + '0';
1005   4                      line[1][12] = day % 10 + '0';
1006   4                  }
1007   3                  else
1008   3                  {
1009   4                      line[1][11] = ' ';
1010   4                      line[1][12] = ' ';
1011   4                  }
1012   3              }
1013   2      
1014   2              LCD12864_DisplayOneLine(1, line[1]);
1015   2              break;
1016   2          case STOPWATCH_START:
1017   2              stopwatchMSecond += INTERVAL;
1018   2              if (stopwatchMSecond > 999)
1019   2              {
1020   3                  stopwatchMSecond = 0;
1021   3                  stopwatchSecond++;
1022   3              }
1023   2              if (stopwatchSecond > 59)
1024   2              {
1025   3                  stopwatchSecond = 0;
1026   3                  stopwatchMinute++;
1027   3              }
1028   2              if (stopwatchMinute > 59)
1029   2              {
1030   3                  stopwatchMinute = 0;
1031   3              }
1032   2              line[0][4] = stopwatchMinute / 10 + '0';
1033   2              line[0][5] = stopwatchMinute % 10 + '0';
1034   2              line[0][6] = ':';
1035   2              line[0][7] = stopwatchSecond / 10 + '0';
1036   2              line[0][8] = stopwatchSecond % 10 + '0';
1037   2              line[0][9] = ':';
1038   2              line[0][10] = stopwatchMSecond / 100 + '0';
1039   2              line[0][11] = stopwatchMSecond / 10 % 10 + '0';
1040   2      
1041   2              LCD12864_DisplayOneLine(0, line[0]);
C51 COMPILER V9.01   CLOCK                                                                 09/24/2023 18:22:02 PAGE 18  

1042   2      
1043   2              break;
1044   2          case SET_ALARM_CLOCK_TIME:
1045   2              if (!setAlarmClockTimeIndex)
1046   2              {
1047   3                  if (interruptCount < (500 / INTERVAL))
1048   3                  {
1049   4                      line[0][5] = setAlarmClockHour / 10 + '0';
1050   4                      line[0][6] = setAlarmClockHour % 10 + '0';
1051   4                  }
1052   3                  else
1053   3                  {
1054   4                      line[0][5] = ' ';
1055   4                      line[0][6] = ' ';
1056   4                  }
1057   3              }
1058   2              else
1059   2              {
1060   3                  if (interruptCount < (500 / INTERVAL))
1061   3                  {
1062   4                      line[0][8] = setAlarmClockMinute / 10 + '0';
1063   4                      line[0][9] = setAlarmClockMinute % 10 + '0';
1064   4                  }
1065   3                  else
1066   3                  {
1067   4                      line[0][8] = ' ';
1068   4                      line[0][9] = ' ';
1069   4                  }
1070   3              }
1071   2              LCD12864_DisplayOneLine(0, line[0]);
1072   2              break;
1073   2          case SET_ALARM_CLOCK_WEEKDAY:
1074   2              if (interruptCount < (500 / INTERVAL))
1075   2              {
1076   3                  if (setAlarmClockWeekday & (1 << setAlarmClockWeekdayIndex))
1077   3                      strncpy(line[2] + setAlarmClockWeekdayIndex * 2, "开", 2);
1078   3                  else
1079   3                      strncpy(line[2] + setAlarmClockWeekdayIndex * 2, "关", 2);
1080   3              }
1081   2              else
1082   2              {
1083   3                  line[2][setAlarmClockWeekdayIndex * 2] = ' ';
1084   3                  line[2][setAlarmClockWeekdayIndex * 2 + 1] = ' ';
1085   3              }
1086   2              LCD12864_DisplayOneLine(2, line[2]);
1087   2              break;
1088   2          default:
1089   2              break;
1090   2          }
1091   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4715    ----
   CONSTANT SIZE    =     78    ----
   XDATA SIZE       =     17    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     85       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
