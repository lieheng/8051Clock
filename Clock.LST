C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: D:\Software\Keil\C51\BIN\C51.EXE Clock.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REG51.H>
   2          #include "LCD12864.h"
   3          
   4          #include <string.h>
   5          
   6          #define INTERVAL 10 // ¼ä¸ô10ºÁÃë
   7          
   8          #define INIT_HOUR 23   // ³õÊ¼»¯Ğ¡Ê±
   9          #define INIT_MINUTE 59 // ³õÊ¼»¯·ÖÖÓ
  10          #define INIT_SECOND 58 // ³õÊ¼»¯Ãë
  11          
  12          #define INIT_YEAR 2020 // ³õÊ¼»¯Äê
  13          #define INIT_MONTH 2   // ³õÊ¼»¯ÔÂ
  14          #define INIT_DAY 28    // ³õÊ¼»¯ÈÕ
  15          
  16          #define INIT_ALARM 0         // ³õÊ¼»¯ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  17          #define INIT_ALARM_HOUR 23   // ³õÊ¼»¯ÄÖÖÓĞ¡Ê±
  18          #define INIT_ALARM_MINUTE 59 // ³õÊ¼»¯ÄÖÖÓ·ÖÖÓ
  19          #define INIT_ALARM_WEEKDAY 0 // ³õÊ¼»¯ÄÖÖÓĞÇÆÚ
  20          #define ALARMCLOCKTIMES 6    // ÄÖÖÓÏìÁå´ÎÊı
  21          
  22          #define INIT_HOURLY_CHIME 0 // ³õÊ¼»¯Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  23          #define HOURLYCHIMETIMES 3  // ÕûµãÏìÁå´ÎÊı
  24          
  25          unsigned char hour = INIT_HOUR;     // ³õÊ¼»¯Ğ¡Ê±
  26          unsigned char minute = INIT_MINUTE; // ³õÊ¼»¯·ÖÖÓ
  27          unsigned char second = INIT_SECOND; // ³õÊ¼»¯Ãë
  28          
  29          unsigned int year = INIT_YEAR;    // ³õÊ¼»¯Äê
  30          unsigned char month = INIT_MONTH; // ³õÊ¼»¯ÔÂ
  31          unsigned char day = INIT_DAY;     // ³õÊ¼»¯ÈÕ
  32          
  33          unsigned char weekday = 0; // ĞÇÆÚ£¬ĞÇÆÚ³õÊ¼»¯ÈÎÎñÓÉinit()º¯Êı¸ºÔğ
  34          
  35          unsigned char alarmHour = INIT_ALARM_HOUR;       // ÄÖÖÓÊ±
  36          unsigned char alarmMinute = INIT_ALARM_MINUTE;   // ÄÖÖÓ·Ö
  37          unsigned char alarmWeekday = INIT_ALARM_WEEKDAY; // ÄÖÖÓĞÇÆÚ¹¦ÄÜ£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ¾ÖÜÒ»Ïì£¬
             -ÒÔ´ËÀàÍÆ
  38          
  39          bit alarm = INIT_ALARM; // ÄÖÖÓ¹¦ÄÜ£¬1±íÊ¾Ïì£¬0±íÊ¾²»Ïì
  40          
  41          bit hourlyChime = INIT_HOURLY_CHIME; // Õûµã±¨Ê±¹¦ÄÜ£¬1±íÊ¾¿ª£¬0±íÊ¾¹Ø
  42          
  43          bit buttonDown = 0;            // ÓÃÓÚÅĞ¶ÏÊÇ·ñÓĞ°´¼ü°´ÏÂ£¬1ÎªÓĞ£¬0ÎªÎŞ
  44          bit button = 0;                // ÓÃÓÚÅĞ¶Ï°´ÏÂµÄÊÇÄÄ¸ö°´¼ü
  45          unsigned int checkCount = 0;   // ÓÃÓÚ¼ì²é°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´£¬Ã¿°´Ò»ºÁÃë¸Ã±äÁ¿¼ÓÒ»
  46          unsigned char shortOrLang = 0; // ÓÃÓÚ±íÊ¾°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´µÄ±êÖ¾£¬0±íÊ¾ÎŞĞ§£¬1±íÊ¾¶Ì°´£¬2±íÊ¾³¤°´
  47          
  48          unsigned char line1[16] = "                ";
  49          unsigned char line2[16] = "                ";
  50          unsigned char line3[16] = "                ";
  51          unsigned char line4[16] = "                ";
  52          
  53          unsigned char hourlyChimeTimes = 0; // ¼ÇÂ¼Õûµã±¨Ê±µÄÏìÁå´ÎÊı
  54          unsigned char alarmClockTimes = 0;  // ¼ÇÂ¼ÄÖÖÓµÄÏìÁå´ÎÊı
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 2   

  55          
  56          unsigned int stopwatchMSecond = 0; // Ãë±íµÄºÁÃëÊı
  57          unsigned char stopwatchSecond = 0; // Ãë±íµÄÃëÊı
  58          unsigned char stopwatchMinute = 0; // Ãë±íµÄ·ÖÖÓÊı
  59          
  60          unsigned char setAlarmHour = INIT_ALARM_HOUR;       // ÉèÖÃÄÖÖÓÊ±µÄ±äÁ¿
  61          unsigned char setAlarmMinute = INIT_ALARM_MINUTE;   // ÉèÖÃÄÖÖÓ·ÖµÄ±äÁ¿
  62          unsigned char setAlarmWeekday = INIT_ALARM_WEEKDAY; // ÉèÖÃÄÖÖÓĞÇÆÚµÄ±äÁ¿£¬µÍ0Î»Îª1±íÊ¾ÖÜÈÕÏì£¬µÍ1Î»Îª1±íÊ
             -¾ÖÜÒ»Ïì£¬ÒÔ´ËÀàÍÆ
  63          
  64          enum MODE
  65          {
  66              SHOW,                 // ÏÔÊ¾Ä£Ê½
  67              SET_YEAR,             // ÉèÖÃÄêÄ£Ê½
  68              SET_MONTH,            // ÉèÖÃÔÂÄ£Ê½
  69              SET_DAY,              // ÉèÖÃÈÕÄ£Ê½
  70              SET_HOUR,             // ÉèÖÃÊ±Ä£Ê½
  71              SET_MINUTE,           // ÉèÖÃ·ÖÄ£Ê½
  72              SET_SECOND,           // ÉèÖÃÃëÄ£Ê½
  73              STOPWATCH,            // Ãë±íÄ£Ê½
  74              STOPWATCH_START,      // Ãë±í¼ÆÊ±Ä£Ê½
  75              STOPWATCH_PAUSE,      // Ãë±íÔİÍ£Ä£Ê½
  76              ALARMCLOCK,           // ÄÖÖÓÄ£Ê½
  77              ALARMCLOCK_HOUR,      // ÉèÖÃÄÖÖÓÊ±Ä£Ê½
  78              ALARMCLOCK_MINUTE,    // ÉèÖÃÄÖÖÓ·ÖÄ£Ê½
  79              ALARMCLOCK_SUNDAY,    // ÉèÖÃÄÖÖÓÖÜÈÕÄ£Ê½
  80              ALARMCLOCK_MONDAY,    // ÉèÖÃÄÖÖÓÖÜÒ»Ä£Ê½
  81              ALARMCLOCK_TUESDAY,   // ÉèÖÃÄÖÖÓÖÜ¶şÄ£Ê½
  82              ALARMCLOCK_WEDNESDAY, // ÉèÖÃÄÖÖÓÖÜÈıÄ£Ê½
  83              ALARMCLOCK_THURSDAY,  // ÉèÖÃÄÖÖÓÖÜËÄÄ£Ê½
  84              ALARMCLOCK_FRIDAY,    // ÉèÖÃÄÖÖÓÖÜÎåÄ£Ê½
  85              ALARMCLOCK_SATURDAY   // ÉèÖÃÄÖÖÓÖÜÁùÄ£Ê½
  86          };
  87          
  88          unsigned char mode = SHOW; // Ä£Ê½
  89          
  90          unsigned int interruptCount = 0; // ÖĞ¶Ï´ÎÊı
  91          
  92          sbit Chime = P2 ^ 3; // ·äÃùÆ÷
  93          
  94          sbit P3_2 = P3 ^ 2; // Íâ²¿ÖĞ¶Ï0µÄ¿ØÖÆÒı½Å
  95          sbit P3_3 = P3 ^ 3; // Íâ²¿ÖĞ¶Ï1µÄ¿ØÖÆÒı½Å
  96          
  97          unsigned char code Seg_Date[] = {
  98              31, // 1ÔÂ
  99              28, // 2ÔÂ
 100              31, // 3ÔÂ
 101              30, // 4ÔÂ
 102              31, // 5ÔÂ
 103              30, // 6ÔÂ
 104              31, // 7ÔÂ
 105              31, // 8ÔÂ
 106              30, // 9ÔÂ
 107              31, // 10ÔÂ
 108              30, // 11ÔÂ
 109              31  // 12ÔÂ
 110          };
 111          
 112          // ³õÊ¼»¯º¯Êı
 113          void Init();
 114          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 115          void Check();
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 3   

 116          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 117          void ShortPress();
 118          // °´¼ü³¤°´´¦Àí³ÌĞò
 119          void LongPress();
 120          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 121          void SecondIncrease();
 122          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
 123          void DateIncrease();
 124          // ¸üĞÂÈÕÆÚ
 125          void UpdateWeekday();
 126          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 127          bit CheckDate(unsigned int year, unsigned char month, unsigned char day);
 128          
 129          void main()
 130          {
 131   1          Init();
 132   1          while (1)
 133   1          {
 134   2              ;
 135   2          }
 136   1      }
 137          
 138          // ³õÊ¼»¯º¯Êı
 139          void Init()
 140          {
 141   1      
 142   1          UpdateWeekday(); // ³õÊ¼»¯ĞÇÆÚ
 143   1      
 144   1          LCD12864_Init(); // ³õÊ¼»¯Òº¾§ÆÁ
 145   1      
 146   1          Chime = 0; // ³õÊ¼»¯·äÃùÆ÷Òı½ÅÎª0£¬·ÀÖ¹Ëğ»µ·äÃùÆ÷
 147   1      
 148   1          EA = 1;      // ¿ªÆô×ÜÖĞ¶Ï
 149   1          IT0 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï0Îª±ßÑØ´¥·¢·½Ê½
 150   1          EX0 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï0
 151   1          IT1 = 1;     // ÉèÖÃÍâ²¿ÖĞ¶Ï1Îª±ßÑØ´¥·¢·½Ê½
 152   1          EX1 = 1;     // ÔÊĞíÍâ²¿ÖĞ¶Ï1
 153   1          PT0 = 1;     // ¼ÆÊ±Æ÷0ÖĞ¶ÏÓÅÏÈ¼¶Îª×î¸ß
 154   1          TMOD = 0x01; // ÉèÖÃ¼ÆÊ±Æ÷0¹¤×÷ÔÚ·½Ê½1
 155   1          ET0 = 1;     // ÔÊĞí¼ÆÊ±Æ÷0ÖĞ¶Ï
 156   1          TR0 = 1;     // Æô¶¯¼ÆÊ±Æ÷
 157   1      
 158   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 159   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 160   1      }
 161          
 162          // ¼ì²éµ±Ç°°´¼üÊÇ³¤°´»¹ÊÇ¶Ì°´
 163          void Check()
 164          {
 165   1          checkCount++; // °´¼üÊ±¼ä¼ÆÊı£¬Ã¿¹ıÒ»ºÁÃë¼ÓÒ»¡£
 166   1      
 167   1          if (checkCount < 10 / INTERVAL) // 10msÑÓ³ÙÈ¥¶¶¶¯
 168   1              return;
 169   1      
 170   1          if (checkCount > 1010 / INTERVAL) // Èç¹û°´ÏÂÊ±¼ä´óÓÚÒ»Ãë£¬Îª³¤°´¡£
 171   1          {
 172   2              shortOrLang = 2;
 173   2              checkCount = 0;
 174   2              buttonDown = 0;
 175   2          }
 176   1          else // Èç¹û°´ÏÂÊ±¼äĞ¡ÓÚÒ»Ãë£¬ÔòÅĞ¶ÏÊÇ·ñËÉ¿ª£¬ÈôËÉ¿ª£¬ÔòÎª¶Ì°´£¬·ñÔò¼ÌĞø¼ÆÊı¡£
 177   1          {
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 4   

 178   2              if ((button == 0 && P3_2 == 1) || (button == 1 && P3_3 == 1))
 179   2              {
 180   3                  shortOrLang = 1;
 181   3                  checkCount = 0;
 182   3                  buttonDown = 0;
 183   3              }
 184   2          }
 185   1      }
 186          
 187          // °´¼ü¶Ì°´´¦Àí³ÌĞò
 188          void ShortPress()
 189          {
 190   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 191   1          {
 192   2              switch (mode)
 193   2              {
 194   3              case SHOW:
 195   3                  mode = STOPWATCH;
 196   3                  break;
 197   3              case STOPWATCH:
 198   3                  mode = ALARMCLOCK;
 199   3                  break;
 200   3              case ALARMCLOCK:
 201   3                  mode = SHOW;
 202   3                  break;
 203   3              case SET_HOUR:
 204   3                  mode = SET_MINUTE;
 205   3                  break;
 206   3              case SET_MINUTE:
 207   3                  mode = SET_SECOND;
 208   3                  break;
 209   3              case SET_SECOND:
 210   3                  mode = SET_HOUR;
 211   3                  break;
 212   3              case SET_YEAR:
 213   3                  mode = SET_MONTH;
 214   3                  break;
 215   3              case SET_MONTH:
 216   3                  mode = SET_DAY;
 217   3                  break;
 218   3              case SET_DAY:
 219   3                  mode = SET_YEAR;
 220   3                  break;
 221   3              case ALARMCLOCK_HOUR:
 222   3                  mode = ALARMCLOCK_MINUTE;
 223   3                  break;
 224   3              case ALARMCLOCK_MINUTE:
 225   3                  mode = ALARMCLOCK_SUNDAY;
 226   3                  break;
 227   3              case ALARMCLOCK_SUNDAY:
 228   3                  mode = ALARMCLOCK_MONDAY;
 229   3                  break;
 230   3              case ALARMCLOCK_MONDAY:
 231   3                  mode = ALARMCLOCK_TUESDAY;
 232   3                  break;
 233   3              case ALARMCLOCK_TUESDAY:
 234   3                  mode = ALARMCLOCK_WEDNESDAY;
 235   3                  break;
 236   3              case ALARMCLOCK_WEDNESDAY:
 237   3                  mode = ALARMCLOCK_THURSDAY;
 238   3                  break;
 239   3              case ALARMCLOCK_THURSDAY:
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 5   

 240   3                  mode = ALARMCLOCK_FRIDAY;
 241   3                  break;
 242   3              case ALARMCLOCK_FRIDAY:
 243   3                  mode = ALARMCLOCK_SATURDAY;
 244   3                  break;
 245   3              case ALARMCLOCK_SATURDAY:
 246   3                  mode = ALARMCLOCK_HOUR;
 247   3                  break;
 248   3              default:
 249   3                  break;
 250   3              }
 251   2          }
 252   1          else
 253   1          {
 254   2              unsigned char setHour;
 255   2              unsigned char setMinute;
 256   2              unsigned char setSecond;
 257   2              switch (mode)
 258   2              {
 259   3              case SET_YEAR:
 260   3                  year++;
 261   3                  year %= 10000;
 262   3      
 263   3                  UpdateWeekday();
 264   3                  break;
 265   3              case SET_MONTH:
 266   3                  month = (month % 12) + 1;
 267   3      
 268   3                  UpdateWeekday();
 269   3                  break;
 270   3              case SET_DAY:
 271   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2) // ÈòÄê2ÔÂ
 272   3                      day = (day % 29) + 1;
 273   3                  else
 274   3                      day = (day % Seg_Date[month - 1]) + 1;
 275   3      
 276   3                  UpdateWeekday();
 277   3                  break;
 278   3              case SET_HOUR:
 279   3                  setHour++;
 280   3                  setHour %= 24;
 281   3      
 282   3                  break;
 283   3              case SET_MINUTE:
 284   3                  setMinute++;
 285   3                  setMinute %= 60;
 286   3      
 287   3                  break;
 288   3              case SET_SECOND:
 289   3                  setSecond++;
 290   3                  setSecond %= 60;
 291   3      
 292   3                  break;
 293   3              case STOPWATCH:
 294   3                  mode = STOPWATCH_START;
 295   3                  break;
 296   3              case STOPWATCH_START:
 297   3                  mode = STOPWATCH_PAUSE;
 298   3                  break;
 299   3              case STOPWATCH_PAUSE:
 300   3                  mode = STOPWATCH_START;
 301   3                  break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 6   

 302   3              case ALARMCLOCK:
 303   3                  alarm = !alarm;
 304   3                  break;
 305   3              case ALARMCLOCK_HOUR:
 306   3                  setAlarmHour++;
 307   3                  setAlarmHour %= 24;
 308   3      
 309   3                  break;
 310   3              case ALARMCLOCK_MINUTE:
 311   3                  setAlarmMinute++;
 312   3                  setAlarmMinute %= 60;
 313   3      
 314   3                  break;
 315   3              case ALARMCLOCK_SUNDAY:
 316   3      
 317   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 0); // µÍ0Î»È¡·´
 318   3      
 319   3                  break;
 320   3              case ALARMCLOCK_MONDAY:
 321   3      
 322   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 1); // µÍ1Î»È¡·´
 323   3      
 324   3                  break;
 325   3              case ALARMCLOCK_TUESDAY:
 326   3      
 327   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 2); // µÍ2Î»È¡·´
 328   3      
 329   3                  break;
 330   3              case ALARMCLOCK_WEDNESDAY:;
 331   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 3); // µÍ3Î»È¡·´
 332   3      
 333   3                  break;
 334   3              case ALARMCLOCK_THURSDAY:
 335   3      
 336   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 4); // µÍ4Î»È¡·´
 337   3      
 338   3                  break;
 339   3              case ALARMCLOCK_FRIDAY:
 340   3      
 341   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 5); // µÍ5Î»È¡·´
 342   3      
 343   3                  break;
 344   3              case ALARMCLOCK_SATURDAY:
 345   3      
 346   3                  setAlarmWeekday = setAlarmWeekday ^ (1 << 6); // µÍ6Î»È¡·´
 347   3      
 348   3                  break;
 349   3              default:
 350   3                  break;
 351   3              }
 352   2          }
 353   1      
 354   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 355   1      }
 356          
 357          // °´¼ü³¤°´´¦Àí³ÌĞò
 358          void LongPress()
 359          {
 360   1          if (button == 0) // Èç¹û°´µÄÊÇ¼üA
 361   1          {
 362   2              switch (mode)
 363   2              {
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 7   

 364   3              case SHOW:
 365   3                  mode = SET_HOUR;
 366   3                  break;
 367   3              case SET_YEAR:
 368   3              case SET_MONTH:
 369   3              case SET_DAY:
 370   3                  if (!CheckDate(year, month, day)) // Èç¹ûÈÕÆÚÎŞÎó²ÅÄÜÈ·¶¨
 371   3                  {
 372   4                      mode = SHOW;
 373   4                  }
 374   3                  break;
 375   3              case SET_HOUR:
 376   3              case SET_MINUTE:
 377   3              case SET_SECOND:
 378   3      
 379   3                  mode = SHOW;
 380   3                  break;
 381   3              case ALARMCLOCK:
 382   3                  mode = ALARMCLOCK_HOUR;
 383   3                  break;
 384   3              case ALARMCLOCK_HOUR:
 385   3              case ALARMCLOCK_MINUTE:
 386   3              case ALARMCLOCK_SUNDAY:
 387   3              case ALARMCLOCK_MONDAY:
 388   3              case ALARMCLOCK_TUESDAY:
 389   3              case ALARMCLOCK_WEDNESDAY:
 390   3              case ALARMCLOCK_THURSDAY:
 391   3              case ALARMCLOCK_FRIDAY:
 392   3              case ALARMCLOCK_SATURDAY:
 393   3                  alarmHour = setAlarmHour;
 394   3                  alarmMinute = setAlarmMinute;
 395   3                  alarmWeekday = setAlarmWeekday;
 396   3                  mode = ALARMCLOCK;
 397   3                  break;
 398   3              default:
 399   3                  break;
 400   3              }
 401   2          }
 402   1          else
 403   1          {
 404   2              switch (mode)
 405   2              {
 406   3              case SHOW:
 407   3                  hourlyChime = !hourlyChime;
 408   3                  break;
 409   3              case SET_HOUR:
 410   3              case SET_MINUTE:
 411   3              case SET_SECOND:
 412   3                  mode = SHOW;
 413   3                  break;
 414   3              case SET_YEAR:
 415   3                  year--;
 416   3                  year %= 10000;
 417   3      
 418   3                  UpdateWeekday();
 419   3                  break;
 420   3              case SET_MONTH:
 421   3                  month += 10;
 422   3                  month = (month % 12) + 1;
 423   3      
 424   3                  UpdateWeekday();
 425   3                  break;
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 8   

 426   3              case SET_DAY:
 427   3                  if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 428   3                  {
 429   4                      day += 29 - 2;
 430   4                      day = (day % 29) + 1;
 431   4                  }
 432   3                  else
 433   3                  {
 434   4                      day += Seg_Date[month - 1] - 2;
 435   4                      day = (day % Seg_Date[month - 1]) + 1;
 436   4                  }
 437   3      
 438   3                  UpdateWeekday();
 439   3                  break;
 440   3              case STOPWATCH_PAUSE:
 441   3                  mode = STOPWATCH;
 442   3                  break;
 443   3              case ALARMCLOCK_HOUR:
 444   3              case ALARMCLOCK_MINUTE:
 445   3              case ALARMCLOCK_SUNDAY:
 446   3              case ALARMCLOCK_MONDAY:
 447   3              case ALARMCLOCK_TUESDAY:
 448   3              case ALARMCLOCK_WEDNESDAY:
 449   3              case ALARMCLOCK_THURSDAY:
 450   3              case ALARMCLOCK_FRIDAY:
 451   3              case ALARMCLOCK_SATURDAY:
 452   3                  setAlarmHour = alarmHour;
 453   3                  setAlarmMinute = alarmMinute;
 454   3                  setAlarmWeekday = alarmWeekday;
 455   3                  mode = ALARMCLOCK;
 456   3                  break;
 457   3              default:
 458   3                  break;
 459   3              }
 460   2          }
 461   1      
 462   1          shortOrLang = 0; // ÖØÖÃ°´¼ü±êÖ¾
 463   1      }
 464          
 465          // ÃëÊıÔö¼Ó´¦Àí³ÌĞò
 466          void SecondIncrease()
 467          {
 468   1          second++;
 469   1          if (second > 59)
 470   1          {
 471   2              second = 0;
 472   2              minute++;
 473   2          }
 474   1      
 475   1          if (minute > 59)
 476   1          {
 477   2              minute = 0;
 478   2              hour++;
 479   2          }
 480   1      
 481   1          if (hour > 23)
 482   1          {
 483   2              hour = 0;
 484   2          }
 485   1      }
 486          
 487          // ÈÕÆÚÔö¼Ó´¦Àí³ÌĞò
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 9   

 488          void DateIncrease()
 489          {
 490   1          day++;
 491   1          if (CheckDate(year, month, day))
 492   1          {
 493   2              day = 1;
 494   2              month++;
 495   2              if (month > 12)
 496   2              {
 497   3                  month = 1;
 498   3                  year++;
 499   3              }
 500   2          }
 501   1      }
 502          
 503          // ¸üĞÂÈÕÆÚ
 504          void UpdateWeekday()
 505          {
 506   1          weekday = ((month > 2 ? (year % 100) : (year % 100) - 1) + ((month > 2 ? (year % 100) : (year % 100) -
             - 1) / 4) + (year / 100) / 4 - 2 * (year / 100) + (26 * ((month > 2 ? month : month + 12) + 1) / 10) + day - 1) % 7;
 507   1      }
 508          
 509          // ¼ì²éÈÕÆÚ³ÌĞò£¬·µ»Ø0±íÊ¾ÈÕÆÚÎŞÎó£¬·µ»Ø1±íÊ¾ÈÕÆÚÓĞÎó
 510          bit CheckDate(unsigned int year, unsigned char month, unsigned char day)
 511          {
 512   1          if (month > 12 || month < 1)
 513   1              return 1; // ÔÂ·İÓĞÎó
 514   1      
 515   1          if (day < 1)
 516   1              return 1; // ÈÕÆÚÓĞÎó
 517   1      
 518   1          if (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) && month == 2)
 519   1          {
 520   2              if (day > 29)
 521   2                  return 1; // ÈòÄê2ÔÂ29ÈÕÓĞÎó
 522   2          }
 523   1          else
 524   1          {
 525   2              if (day > Seg_Date[month - 1])
 526   2                  return 1;
 527   2          }
 528   1      
 529   1          return 0;
 530   1      }
 531          
 532          void ClearChar(unsigned char *str)
 533          {
 534   1          unsigned char len = strlen(str);
 535   1          unsigned char i = 0;
 536   1          for (i = 0; i < len; i++)
 537   1          {
 538   2              str[i] = ' ';
 539   2          }
 540   1      }
 541          
 542          void Int0() interrupt 0
 543          {
 544   1          if (buttonDown == 0)
 545   1          {
 546   2              buttonDown = 1;
 547   2              button = 0;
 548   2          }
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 10  

 549   1      }
 550          
 551          void Int1() interrupt 2
 552          {
 553   1          if (buttonDown == 0)
 554   1          {
 555   2              buttonDown = 1;
 556   2              button = 1;
 557   2          }
 558   1      }
 559          
 560          // ¶¨Ê±Æ÷0ÖĞ¶Ï·şÎñº¯Êı
 561          void Timer0() interrupt 1
 562          {
 563   1          unsigned char *p;
 564   1          interruptCount++;
 565   1      
 566   1          TH0 = (65536 - INTERVAL * 1000) / 256;
 567   1          TL0 = (65536 - INTERVAL * 1000) % 256;
 568   1      
 569   1          if (interruptCount == (1000 / INTERVAL))
 570   1          { // 1Ãë
 571   2              interruptCount = 0;
 572   2              SecondIncrease();
 573   2              if (hour == 0 && minute == 0 && second == 0)
 574   2              {
 575   3                  DateIncrease();
 576   3                  UpdateWeekday();
 577   3              }
 578   2          }
 579   1      
 580   1          if (buttonDown == 1)
 581   1          {
 582   2              Check();
 583   2          }
 584   1      
 585   1          if (shortOrLang == 1)
 586   1          {
 587   2              ShortPress();
 588   2          }
 589   1          else if (shortOrLang == 2)
 590   1          {
 591   2              LongPress();
 592   2          }
 593   1      
 594   1          if (mode == SHOW && alarm == 1)
 595   1          {
 596   2              if (hour == alarmHour && minute == alarmMinute && second == 00 && (alarmWeekday & (1 << weekday)) 
             -> 0 && interruptCount == 0)
 597   2                  alarmClockTimes = 2 * ALARMCLOCKTIMES;
 598   2              if (alarmClockTimes != 0)
 599   2              {
 600   3                  if ((0 < interruptCount && interruptCount < (250 / INTERVAL)) || ((500 / INTERVAL) < interrupt
             -Count && interruptCount < (750 / INTERVAL)))
 601   3                      Chime = !Chime;
 602   3                  else
 603   3                      Chime = 0;
 604   3                  if (interruptCount % (250 / INTERVAL) == 0)
 605   3                  {
 606   4                      alarmClockTimes--;
 607   4                      Chime = 0;
 608   4                  }
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 11  

 609   3              }
 610   2          }
 611   1      
 612   1          if (mode == SHOW && hourlyChime == 1)
 613   1          {
 614   2              if (hourlyChimeTimes == 0 && minute == 0 && second == 0 && interruptCount == 0)
 615   2                  hourlyChimeTimes = 2 * (HOURLYCHIMETIMES + 1); // ÎÒÒ²²»ÖªµÀÕâÀïÎªÊ²Ã´Òª¼ÓÒ»£¬µ«ÊÂÊµ¾ÍÊÇËü»áÏì
             -HOURLYCHIMETIMES-1´Î£¬ËùÒÔÒª¼ÓÒ»²¹ÉÏ¡£
 616   2              if (hourlyChimeTimes != 0)
 617   2              {
 618   3                  if (interruptCount > (500 / INTERVAL))
 619   3                      Chime = !Chime;
 620   3                  else
 621   3                      Chime = 0;
 622   3                  if (interruptCount % (500 / INTERVAL) == 0)
 623   3                  {
 624   4                      hourlyChimeTimes--;
 625   4                      Chime = 0;
 626   4                  }
 627   3              }
 628   2          }
 629   1      
 630   1          switch (mode)
 631   1          {
 632   2          case SHOW:
 633   2              ClearChar(line1);
 634   2              ClearChar(line2);
 635   2              ClearChar(line3);
 636   2              ClearChar(line4);
 637   2              line1[4] = hour / 10 + '0'; // Ğ¡Ê±Ê®Î»
 638   2              line1[5] = hour % 10 + '0'; // Ğ¡Ê±¸öÎ»
 639   2              line1[6] = ':';
 640   2              line1[7] = minute / 10 + '0'; // ·ÖÖÓÊ®Î»
 641   2              line1[8] = minute % 10 + '0'; // ·ÖÖÓ¸öÎ»
 642   2              line1[9] = ':';
 643   2              line1[10] = second / 10 + '0'; // ÃëÖÓÊ®Î»
 644   2              line1[11] = second % 10 + '0'; // ÃëÖÓ¸öÎ»
 645   2      
 646   2              line2[3] = year / 1000 + '0';     // Äê·İÇ§Î»
 647   2              line2[4] = year / 100 % 10 + '0'; // Äê·İ°ÙÎ»
 648   2              line2[5] = year / 10 % 10 + '0';  // Äê·İÊ®Î»
 649   2              line2[6] = year % 10 + '0';       // Äê·İ¸öÎ»
 650   2              line2[7] = '-';
 651   2              line2[8] = month / 10 + '0'; // ÔÂ·İÊ®Î»
 652   2              line2[9] = month % 10 + '0'; // ÔÂ·İ¸öÎ»
 653   2              line2[10] = '-';
 654   2              line2[11] = day / 10 + '0'; // ÈÕÆÚÊ®Î»
 655   2              line2[12] = day % 10 + '0'; // ÈÕÆÚ¸öÎ»
 656   2      
 657   2              switch (weekday)
 658   2              {
 659   3              case 0:
 660   3                  strncpy(line3 + 6, "ÖÜÈÕ", 4);
 661   3                  break;
 662   3              case 1:
 663   3                  strncpy(line3 + 6, "ÖÜÒ»", 4);
 664   3                  break;
 665   3              case 2:
 666   3                  strncpy(line3 + 6, "ÖÜ¶ş", 4);
 667   3                  break;
 668   3              case 3:
 669   3                  strncpy(line3 + 6, "ÖÜÈı", 4);
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 12  

 670   3                  break;
 671   3              case 4:
 672   3                  strncpy(line3 + 6, "ÖÜËÄ", 4);
 673   3                  break;
 674   3              case 5:
 675   3                  strncpy(line3 + 6, "ÖÜÎå", 4);
 676   3                  break;
 677   3              case 6:
 678   3                  strncpy(line3 + 6, "ÖÜÁù", 4);
 679   3                  break;
 680   3              default:
 681   3                  break;
 682   3              }
 683   2              strncpy(line4 + 2, "Õûµã±¨Ê±  ", 10);
 684   2              if (hourlyChime)
 685   2                  strncpy(line4 + 12, "¿ª", 2);
 686   2              else
 687   2                  strncpy(line4 + 12, "¹Ø", 2);
 688   2      
 689   2              LCD12864_DisplayOneLine(LINE1, line1, 16);
 690   2              LCD12864_DisplayOneLine(LINE2, line2, 16);
 691   2              LCD12864_DisplayOneLine(LINE3, line3, 16);
 692   2              LCD12864_DisplayOneLine(LINE4, line4, 16);
 693   2              break;
 694   2          case SET_HOUR:
 695   2      
 696   2              break;
 697   2          case SET_MINUTE:
 698   2      
 699   2              break;
 700   2          case SET_SECOND:
 701   2      
 702   2              break;
 703   2          case SET_YEAR:
 704   2      
 705   2              break;
 706   2          case SET_MONTH:
 707   2      
 708   2              break;
 709   2          case SET_DAY:
 710   2      
 711   2              break;
 712   2          case STOPWATCH:
 713   2              stopwatchMSecond = 0;
 714   2              stopwatchSecond = 0;
 715   2              stopwatchMinute = 0;
 716   2      
 717   2              break;
 718   2          case STOPWATCH_START:
 719   2              stopwatchMSecond += INTERVAL;
 720   2              if (stopwatchMSecond > 999)
 721   2              {
 722   3                  stopwatchMSecond = 0;
 723   3                  stopwatchSecond++;
 724   3              }
 725   2              if (stopwatchSecond > 59)
 726   2              {
 727   3                  stopwatchSecond = 0;
 728   3                  stopwatchMinute++;
 729   3              }
 730   2              if (stopwatchMinute > 59)
 731   2              {
C51 COMPILER V9.01   CLOCK                                                                 09/21/2023 13:42:28 PAGE 13  

 732   3                  stopwatchMinute = 0;
 733   3              }
 734   2      
 735   2              break;
 736   2          case STOPWATCH_PAUSE:
 737   2      
 738   2              break;
 739   2          case ALARMCLOCK:
 740   2      
 741   2              break;
 742   2          case ALARMCLOCK_HOUR:
 743   2      
 744   2              break;
 745   2          case ALARMCLOCK_MINUTE:
 746   2      
 747   2              break;
 748   2          case ALARMCLOCK_SUNDAY:
 749   2      
 750   2              break;
 751   2          case ALARMCLOCK_MONDAY:
 752   2      
 753   2              break;
 754   2          case ALARMCLOCK_TUESDAY:
 755   2      
 756   2              break;
 757   2          case ALARMCLOCK_WEDNESDAY:
 758   2      
 759   2              break;
 760   2          case ALARMCLOCK_THURSDAY:
 761   2      
 762   2              break;
 763   2          case ALARMCLOCK_FRIDAY:
 764   2      
 765   2              break;
 766   2          case ALARMCLOCK_SATURDAY:
 767   2      
 768   2              break;
 769   2          default:
 770   2              break;
 771   2          }
 772   1      }
*** WARNING C280 IN LINE 563 OF CLOCK.C: 'p': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2241    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     90       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
